<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KarL05&#39;s Blog</title>
  
  
  <link href="https://7ue9ueue.github.io/atom.xml" rel="self"/>
  
  <link href="https://7ue9ueue.github.io/"/>
  <updated>2023-11-25T03:30:27.785Z</updated>
  <id>https://7ue9ueue.github.io/</id>
  
  <author>
    <name>Tony Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Accelerated 01 Knapsack Algorithm and the Quadrangle Inequality</title>
    <link href="https://7ue9ueue.github.io/2023/11/23/%E4%B8%AD%E6%96%87/Knapsack/"/>
    <id>https://7ue9ueue.github.io/2023/11/23/%E4%B8%AD%E6%96%87/Knapsack/</id>
    <published>2023-11-22T16:00:00.000Z</published>
    <updated>2023-11-25T03:30:27.785Z</updated>
    
    <content type="html"><![CDATA[<h1id="accelerated-01-knapsack-algorithm-and-the-quadrangle-inequality">Accelerated01 Knapsack Algorithm and the Quadrangle Inequality</h1><blockquote><p>Reference:</p><p>Capacitated Dynamic Programming: Faster Knapsack and Graph Algorithmshttps://arxiv.org/abs/1802.06440</p><p>SMAWK Algorithmhttps://noshi91.github.io/Library/algorithm/smawk.cpp</p><p>LARSCH Algorithmhttps://noshi91.github.io/Library/algorithm/larsch.cpp</p></blockquote><hr /><blockquote><p>I was revisiting my personal statement and I read Professor <ahref="https://arxiv.org/search/cs?searchtype=author&amp;query=Axiotis,+K">KyriakosAxiotis</a> and Professor <ahref="https://arxiv.org/search/cs?searchtype=author&amp;query=Tzamos,+C">ChristosTzamos</a>'s paper again. I implemented their ideas on the monotonicityof the knapsack problem and record this as a notes of what I learned.Basically, the SMAWK algorithm and the LARSCH algorithm provides analternative approach for the traditional binary search method fordynamic programming problems that involved the quadrangleinequality.</p></blockquote><h2 id="quadrangle-inequality">Quadrangle Inequality</h2><blockquote><p>Reference:</p><p>Quadrangle Inequality trick for dynamic programshttps://tryalgo.org/en/graphs/2022/11/03/optimal-search-tree/</p><p>Quadrangle Inequality Propertieshttps://codeforces.com/blog/entry/86306</p></blockquote><p>The function <span class="math inline">\(w(x,y)\)</span> satisfiesquadrangle Inequality if: <span class="math display">\[a\leq b \leq c \leq d \Longrightarrow w(a,c)+w(b,d) \leq w(a,d)+w(b,c)\]</span> If the function <span class="math inline">\(w(x,y)\)</span> isconsidered as a matrix <span class="math inline">\(A_{n,m}\)</span>,then it could also been said that <spanclass="math inline">\(A_{n,m}\)</span> is Monge. In competitiveprogramming, the Monge matrix is less known and the name "quadrangleinequality" is more often used (at least in where I study). In myopinion they are the same thing but with different names.</p><p>To decide whether <span class="math inline">\(w(x,y)\)</span>satisfies the quadrangle inequality, one only have to decide if <spanclass="math display">\[w(j,i)+w(j+1,i+1) \leq w(j+1,i)+w(j,i+1)\]</span> Which can be proved by induction.</p><p>The optimization of dynamic programming quadrangle inequality is amethod discovered by Knuth and sometimes known as Knuth's Optimization.Knuth's Optimization solves:</p><p>Case (3) <span class="math display">\[f(i,j) = \min_k(f(i,k)+f(k+1,j)+w(j,i))\]</span></p><p>Case (4) <span class="math display">\[f(i) = \min_j(w(j,i))\]</span></p><p>Case (5) <span class="math display">\[f(i) = \min_j (f(j)+w(j,i))\]</span></p><p>Case (6) <span class="math display">\[f(i) = \min_j(g(j)+w(j,i))\]</span></p><blockquote><p>Note: (3) requires <span class="math inline">\(w(b,c) \leqw(a,d)\)</span>. as well as the quadrangle inequality. However in mostcases this is easy.</p><p>The original method in Knuth, D. E., <ahref="https://doi.org/10.1007/BF00264289">Optimum binary searchtrees</a>, Acta Informatica, 1(1), pages 14–25, 1971. Seems only accountfor case (3). However studying this optimization more we can realizethat (4) is the generalized idea for the optimization, and every othercase can be converted to case (4). I don't have 39,95 € so I don'treally know what is inside this link.</p></blockquote><hr /><h2 id="the-optimization">The Optimization</h2><p>For dynamic programming <span class="math inline">\(f\)</span> <spanclass="math display">\[f(i) = \min_{j}(w(j,i))\]</span> Define <span class="math inline">\(\text{opt}(i)\)</span> asthe largest integer where <span class="math display">\[f(i) = w(\text{opt}(i),i)\]</span></p><p><strong>Theorem 1</strong> (monotone theorem?) (I actually don't knowthe name) <span class="math display">\[i_1 &lt; i_2 \Longrightarrow \text{opt}(i_1) &lt; \text{opt}(i_2)\]</span> <strong>Proof</strong></p><p>Suppose for some <span class="math inline">\(i_1&lt; i_2\)</span>,<span class="math inline">\(j_1 = \text{opt}(i_1) \geq \text{opt}(i_2) =j_2\)</span>. Then <span class="math inline">\(j_2 \leq j_1 \leq i_1&lt; i_2\)</span>.</p><p>Then by the quadrangle inequality, <span class="math display">\[w(j_1,i_2) + w(j_2,i_1) \leq w(j_1,i_1) + w(j_2,i_2)\]</span></p><p>However, <span class="math display">\[w(j_2,i_1) \geq w(\text{opt}(i_1),i_1) = w(j_1,i_1)\]</span></p><p><span class="math display">\[w(j_1,i_2) &gt; w(\text{opt}(i_2),i_2) = w(j_2,i_2)\]</span></p><p>Which means that: <span class="math display">\[w(j_1,i_2) + w(j_2,i_1) &gt; w(j_1,i_1) + w(j_2,i_2)\]</span> Contradiction. <spanclass="math inline">\(\square\)</span></p><p>To obtain other forms of the optimization, just do a suitablesubstitution. If <span class="math inline">\(\max\)</span> is to replace<span class="math inline">\(\min\)</span>, define new <spanclass="math inline">\(w&#39;(x,y) = -w(x,y)\)</span>. And prove can bedone similarly. The next section gives an example of theapplication.</p><h2 id="the-algorithm">The Algorithm</h2><p>There are commonly two algorithms to apply <strong>Theorem 1</strong>(not SMAWK and LARSCH):</p><p><strong>Algorithm 1</strong> Just binary search</p><ul><li>In order to find <span class="math inline">\(f(l\dots r)\)</span>,we use binary search to break this section into two parts, <spanclass="math inline">\(f(l \dots mid-1)\)</span> and <spanclass="math inline">\(f(mid+1 \dots r)\)</span>.</li><li>Why <span class="math inline">\(f(mid)\)</span> is missing? This isbecause we can evaluate <span class="math inline">\(f(mid)\)</span> and<span class="math inline">\(\text{opt}(mid)\)</span> with bruteforce.</li><li>After finding <span class="math inline">\(f(mid)\)</span> and <spanclass="math inline">\(\text{opt}(mid)\)</span>, apply recursing to solvefor the left part and the right part.</li></ul><p>The algorithm runs with <span class="math inline">\(O(n\logn)\)</span> time complexity. This is best for <strong>Case(6)</strong>.</p><blockquote><p>Another way to understand this method is compare it to merge sort.It's the same thing.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Reference: https://oi-wiki.org/dp/opt/quadrangle/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">w</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> i)</span></span>; <span class="comment">//O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DP</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr)</span> </span>&#123; <span class="comment">//O(nlogn)</span></span><br><span class="line">  <span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> k = ql;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j=ql;j&lt;=<span class="built_in">min</span>(qr,mid<span class="number">-1</span>);j++)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">w</span>(j,mid)&lt;<span class="built_in">w</span>(k,mid)) k = j;</span><br><span class="line">  f[mid] = <span class="built_in">w</span>(k,mid);</span><br><span class="line">  <span class="keyword">if</span> (l&lt;mid) <span class="built_in">DP</span>(l,mid<span class="number">-1</span>,ql,k);</span><br><span class="line">  <span class="keyword">if</span> (r&gt;mid) <span class="built_in">DP</span>(mid+<span class="number">1</span>,r,k,qr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Algorithm 2</strong> Binary search using a queue</p><p>For the set of <span class="math inline">\(i\)</span> such that <spanclass="math inline">\(j = \text{opt}(i)\)</span>, its clear that thisset is a contiguous segment that can be denoted by <spanclass="math inline">\([l_j,r_j]\)</span>. Therefore, we can use a queuemaintain a list of possible <spanclass="math inline">\(\text{opt}(i)\)</span> that can be the answer inthe future. When adding a new element, do binary search to pop elementsfrom the back.</p><p>This method is not the focus of this article as clearly this methodis more complicated than the previous one. Its only used when <spanclass="math inline">\(f(i)\)</span> has self-dependencies <strong>(Case5)</strong> but the knapsack problem is <strong>(Case 6)</strong>.</p><p>Here is a Chinese source for this method.https://oi-wiki.org/dp/opt/quadrangle/.</p><hr /><h2 id="the-01-knapsack-problem">The 01 knapsack Problem</h2><p>Problem Link https://loj.ac/p/6039</p><p>For the 01 knapsack problem, define the value of the objects as <spanclass="math inline">\(v_i\)</span>, the size of the objects as <spanclass="math inline">\(s_i\)</span>. Then, sort all objects with the samesize in descending order and find the prefix sum for each possible sizeof objects.</p><p>Define the prefix sum array as <spanclass="math inline">\(p_i[k]\)</span>. Where <spanclass="math inline">\(i\)</span> is the <spanclass="math inline">\(i\)</span>-th unique smallest element is <spanclass="math inline">\(s\)</span> and <spanclass="math inline">\(k\)</span> is the number of objects chosen withthis size. Now, we can do (max,+) convolutions with the <spanclass="math inline">\(p_i\)</span> array.</p><p>Define <span class="math inline">\(f_c(j)\)</span> as the answerconsidering objects from <span class="math inline">\(p_{i...c}\)</span>and the sum of sizes being <span class="math inline">\(j\)</span>. Then<span class="math display">\[f_c(i) = \max_{j=0}^{i-jc \geq 0} (f_{c-1}(i-jc)+p_c[j])\]</span></p><blockquote><p>Note that <span class="math inline">\(c\)</span> can be considered asa constant.</p></blockquote><p>Define <span class="math display">\[w(j,i) = p_c[i-j]\]</span> <strong>Lemma 1</strong> <spanclass="math inline">\(w(j,i)\)</span> follows the quadrangle inequality.<span class="math display">\[w(j,i)+w(j+1,i+1) \leq w(j+1,i)+w(j,i+1)\]</span></p><p><span class="math display">\[p_c[j-i]+p_c[j-i] \leq p_c[j-i-1] + p_c[j-i+1]\]</span></p><p><span class="math display">\[p_c[j-i]-p_c[j-i-1]\leq  p_c[j-i+1]-p_c[j-i]\]</span></p><p>LHS is the element with rank <span class="math inline">\(j-i\)</span>and RHS is the element with rank <spanclass="math inline">\(j-i+1\)</span>. So RHS is bigger as the elementsare sorted. <span class="math inline">\(\square\)</span></p><p>Rewriting (14) will obtain: <span class="math display">\[f_c(i) = \max_{j=0}^{i-jc \geq 0} (f_{c-1}(i-jc)+p_c[j]) \\\]</span></p><p><span class="math display">\[f_c(i) = \max_{i-(i-j)c\geq 0}^{j=i} (f_{c-1}(i-(i-j)c)+p_c[i-j]) \\\]</span></p><p><span class="math display">\[f_c(i) = \max_{i-(i-j)c\geq 0}^{j=i} (g(j)+w(j,i))\]</span></p><p>Which returns to <strong>Case (6)</strong>.</p><p><strong>Lemma 2</strong> <span class="math inline">\(w&#39;(j,i) =g(j)+w(j,i)\)</span> follows the quadrangle inequality. <spanclass="math display">\[w&#39;(j,i)+w&#39;(j+1,i+1) \leq w&#39;(j+1,i)+w&#39;(j,i+1)\]</span></p><p><span class="math display">\[w(j,i)+g(j)+w(j+1,i+1)+g(j+1) \leq w(j+1,i)+g(j+1)+w(j,i+1)+g(j) \\\]</span></p><p><span class="math display">\[w(j,i)+w(j+1,i+1) \leq w(j+1,i)+w(j,i+1)\]</span></p><p><span class="math inline">\(\square\)</span></p><p><strong>Case (3),(5),(6)</strong> can be done similarly. And ofcourse it's left as exercise for readers.</p><hr /><h2 id="smawk-algorithm-and-larsch-algorithm">SMAWK algorithm and LARSCHalgorithm</h2><p>I'm not really sure of the mechanism of these two algorithms yet, butSMAWK solves <strong>Case (6)</strong> in linear time and LARSCH solves<strong>Case (5)</strong> in linear time. Therefore, the time complexityof 01 knapsack can be optimized from <spanclass="math inline">\(O(nW)\)</span> to <spanclass="math inline">\(O(DW\log D)\)</span> to $ O(DW)$. Where <spanclass="math inline">\(n\)</span> is number of objects, <spanclass="math inline">\(W\)</span> is desired total weight, and <spanclass="math inline">\(D\)</span> is number of distinct weight.</p><hr /><h2 id="appendix">Appendix</h2><p><strong>Code 1</strong> Binary Search Solution</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim;</span><br><span class="line"><span class="type">int</span> sz[maxn], f[maxn], g[maxn], t[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> ql, <span class="type">int</span> qr, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sl = <span class="built_in">max</span>(ql, l - sz[x]);</span><br><span class="line">        <span class="type">int</span> sr = <span class="built_in">min</span>(qr, l - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = sl; i &lt;= sr; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[t[l]] = <span class="built_in">max</span>(f[t[l]], g[t[i]] + a[x][l - i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> pos = mid;</span><br><span class="line">    <span class="type">int</span> sl = <span class="built_in">max</span>(ql, mid - sz[x]);</span><br><span class="line">    <span class="type">int</span> sr = <span class="built_in">min</span>(qr, mid - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = sl; i &lt;= sr; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[t[mid]] &lt;= g[t[i]] + a[x][mid - i])</span><br><span class="line">        &#123;</span><br><span class="line">            f[t[mid]] = g[t[i]] + a[x][mid - i];</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(l, mid, ql, pos, x);</span><br><span class="line">    <span class="built_in">solve</span>(mid + <span class="number">1</span>, r, pos, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        lim = <span class="built_in">max</span>(lim, x);</span><br><span class="line">        s[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lim; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">        a[i].<span class="built_in">resize</span>(s[i].<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : s[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][++sz[i]] = x;</span><br><span class="line">            a[i][sz[i]] += a[i][sz[i] - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            g[j] = f[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt;= m; k += i)</span><br><span class="line">                t[++c] = k;</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">solve</span>(<span class="number">2</span>, c, <span class="number">1</span>, c, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cout &lt;&lt; f[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Code 2</strong> LARSCH Algorithm</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Larsch Algorithm, zero indexed, lower triangular matrix.</span></span><br><span class="line"><span class="comment">// https://noshi91.github.io/Library/algorithm/larsch.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">larsch</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">reduce_row</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">reduce_col</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">reduce_row</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::function&lt;T(<span class="type">int</span>, <span class="type">int</span>)&gt; f;</span><br><span class="line">        <span class="type">int</span> cur_row;</span><br><span class="line">        <span class="type">int</span> state;</span><br><span class="line">        std::unique_ptr&lt;reduce_col&gt; rec;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reduce_row</span>(<span class="type">int</span> n_) : <span class="built_in">n</span>(n_), <span class="built_in">f</span>(), <span class="built_in">cur_row</span>(<span class="number">0</span>), <span class="built_in">state</span>(<span class="number">0</span>), <span class="built_in">rec</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> m = n / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (m != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                rec = std::<span class="built_in">make_unique</span>&lt;reduce_col&gt;(m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">set_f</span><span class="params">(std::function&lt;T(<span class="type">int</span>, <span class="type">int</span>)&gt; f_)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            f = f_;</span><br><span class="line">            <span class="keyword">if</span> (rec)</span><br><span class="line">            &#123;</span><br><span class="line">                rec-&gt;<span class="built_in">set_f</span>([&amp;](<span class="type">int</span> i, <span class="type">int</span> j) -&gt; T</span><br><span class="line">                           &#123; <span class="keyword">return</span> <span class="built_in">f</span>(<span class="number">2</span> * i + <span class="number">1</span>, j); &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">get_argmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> cur_row_ = cur_row;</span><br><span class="line">            cur_row += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur_row_ % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">const</span> <span class="type">int</span> prev_argmin = state;</span><br><span class="line">                <span class="type">const</span> <span class="type">int</span> next_argmin = [&amp;]()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cur_row_ + <span class="number">1</span> == n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> n - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> rec-&gt;<span class="built_in">get_argmin</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;();</span><br><span class="line">                state = next_argmin;</span><br><span class="line">                <span class="type">int</span> ret = prev_argmin;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = prev_argmin + <span class="number">1</span>; j &lt;= next_argmin; j += <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">f</span>(cur_row_, ret) &gt; <span class="built_in">f</span>(cur_row_, j))</span><br><span class="line">                    &#123;</span><br><span class="line">                        ret = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">f</span>(cur_row_, state) &lt;= <span class="built_in">f</span>(cur_row_, cur_row_))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> state;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> cur_row_;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">reduce_col</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        std::function&lt;T(<span class="type">int</span>, <span class="type">int</span>)&gt; f;</span><br><span class="line">        <span class="type">int</span> cur_row;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; cols;</span><br><span class="line">        reduce_row rec;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reduce_col</span>(<span class="type">int</span> n_) : <span class="built_in">n</span>(n_), <span class="built_in">f</span>(), <span class="built_in">cur_row</span>(<span class="number">0</span>), <span class="built_in">cols</span>(), <span class="built_in">rec</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">set_f</span><span class="params">(std::function&lt;T(<span class="type">int</span>, <span class="type">int</span>)&gt; f_)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            f = f_;</span><br><span class="line">            rec.<span class="built_in">set_f</span>([&amp;](<span class="type">int</span> i, <span class="type">int</span> j) -&gt; T</span><br><span class="line">                      &#123; <span class="keyword">return</span> <span class="built_in">f</span>(i, cols[j]); &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">get_argmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> cur_row_ = cur_row;</span><br><span class="line">            cur_row += <span class="number">1</span>;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> cs = [&amp;]() -&gt; std::vector&lt;<span class="type">int</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur_row_ == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;&#123;<span class="number">2</span> * cur_row_ - <span class="number">1</span>, <span class="number">2</span> * cur_row_&#125;&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> j : cs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> ([&amp;]()</span><br><span class="line">                       &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> size = cols.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">return</span> size != cur_row_ &amp;&amp; <span class="built_in">f</span>(size - <span class="number">1</span>, cols.<span class="built_in">back</span>()) &gt; <span class="built_in">f</span>(size - <span class="number">1</span>, j); &#125;())</span><br><span class="line">                &#123;</span><br><span class="line">                    cols.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cols.<span class="built_in">size</span>() != n)</span><br><span class="line">                &#123;</span><br><span class="line">                    cols.<span class="built_in">push_back</span>(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cols[rec.<span class="built_in">get_argmin</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std::unique_ptr&lt;reduce_row&gt; base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">larsch</span>(<span class="type">int</span> n, std::function&lt;<span class="built_in">T</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; f)</span><br><span class="line">        : <span class="built_in">base</span>(std::<span class="built_in">make_unique</span>&lt;reduce_row&gt;(n))</span><br><span class="line">    &#123;</span><br><span class="line">        base-&gt;<span class="built_in">set_f</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_argmin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> base-&gt;<span class="built_in">get_argmin</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxk = <span class="number">305</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim;</span><br><span class="line"><span class="type">int</span> sz[maxk], f[maxn], g[maxn], t[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s[maxk], a[maxk];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> w = [&amp;](<span class="type">const</span> <span class="type">int</span> ip, <span class="type">const</span> <span class="type">int</span> jp, <span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">bool</span> isLarsch) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = ip;</span><br><span class="line">        <span class="type">int</span> j = jp;</span><br><span class="line">        <span class="keyword">if</span> (isLarsch)</span><br><span class="line">            i++, j++;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= i)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> g[t[j]] + a[x][i - j];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">larsch&lt;<span class="type">int</span>&gt; <span class="title">opt</span><span class="params">(c, [&amp;](<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="params"><span class="function">                    &#123; <span class="keyword">return</span> -w(i, j, x, <span class="literal">true</span>); &#125;)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = opt.<span class="built_in">get_argmin</span>();</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        f[t[i]] = <span class="built_in">max</span>(f[t[i]], <span class="built_in">w</span>(i, j + <span class="number">1</span>, x, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        lim = <span class="built_in">max</span>(lim, x);</span><br><span class="line">        s[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lim; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!s[i].<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">sort</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">        a[i].<span class="built_in">resize</span>(m / i + <span class="number">5</span>);</span><br><span class="line">        a[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; a[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> &lt; s[i].<span class="built_in">size</span>())</span><br><span class="line">                a[i][j] += s[i][j - <span class="number">1</span>];</span><br><span class="line">            a[i][j] += a[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            g[j] = f[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt;= m; k += i)</span><br><span class="line">                t[++c] = k;</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">solve</span>(c, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; f[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Code 3</strong> SMAWK Algorithm</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SMAWK Algorithm, zero indexed, any matrix.</span></span><br><span class="line"><span class="comment">// https://noshi91.github.io/Library/algorithm/smawk.cpp</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Select</span>&gt;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">smawk</span><span class="params">(<span class="type">const</span> <span class="type">int</span> row_size, <span class="type">const</span> <span class="type">int</span> col_size, <span class="type">const</span> Select &amp;select)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> vec = vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line">    <span class="type">const</span> function&lt;vec(<span class="type">const</span> vec &amp;, <span class="type">const</span> vec &amp;)&gt; solve =</span><br><span class="line">        [&amp;](<span class="type">const</span> vec &amp;row, <span class="type">const</span> vec &amp;col) -&gt; vec</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = row.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        vec c2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> i : col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!c2.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">select</span>(row[c2.<span class="built_in">size</span>() - <span class="number">1</span>], c2.<span class="built_in">back</span>(), i))</span><br><span class="line">                c2.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">if</span> (c2.<span class="built_in">size</span>() &lt; n)</span><br><span class="line">                c2.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vec r2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">            r2.<span class="built_in">push_back</span>(row[i]);</span><br><span class="line">        <span class="type">const</span> vec a2 = <span class="built_in">solve</span>(r2, c2);</span><br><span class="line">        <span class="function">vec <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != a2.<span class="built_in">size</span>(); i++)</span><br><span class="line">            ans[i * <span class="number">2</span> + <span class="number">1</span>] = a2[i];</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i] = c2[j];</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> end = i + <span class="number">1</span> == n ? c2.<span class="built_in">back</span>() : ans[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (c2[j] != end)</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">select</span>(row[i], ans[i], c2[j]))</span><br><span class="line">                    ans[i] = c2[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vec <span class="title">row</span><span class="params">(row_size)</span></span>;</span><br><span class="line">    <span class="built_in">iota</span>(row.<span class="built_in">begin</span>(), row.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="function">vec <span class="title">col</span><span class="params">(col_size)</span></span>;</span><br><span class="line">    <span class="built_in">iota</span>(col.<span class="built_in">begin</span>(), col.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">solve</span>(row, col);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxk = <span class="number">305</span>;</span><br><span class="line"><span class="type">int</span> n, m, lim;</span><br><span class="line"><span class="type">int</span> sz[maxk], f[maxn], g[maxn], t[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s[maxk], a[maxk];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> w = [&amp;](<span class="type">const</span> <span class="type">int</span> ip, <span class="type">const</span> <span class="type">int</span> jp, <span class="type">const</span> <span class="type">int</span> x, <span class="type">const</span> <span class="type">bool</span> SMAWK) -&gt; <span class="type">int</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = ip;</span><br><span class="line">        <span class="type">int</span> j = jp;</span><br><span class="line">        <span class="keyword">if</span> (SMAWK)</span><br><span class="line">            i++, j++;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= i)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> g[t[j]] + a[x][i - j];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> select = [&amp;](<span class="type">const</span> <span class="type">int</span> i, <span class="type">const</span> <span class="type">int</span> j, <span class="type">const</span> <span class="type">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= k)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">w</span>(i, j, x, <span class="literal">true</span>) &lt;= <span class="built_in">w</span>(i, k, x, <span class="literal">true</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; amax = <span class="built_in">smawk</span>(c, c, select);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= c; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[t[i]] = <span class="built_in">max</span>(f[t[i]], <span class="built_in">w</span>(i, amax[i - <span class="number">1</span>] + <span class="number">1</span>, x, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        cin &gt;&gt; y;</span><br><span class="line">        lim = <span class="built_in">max</span>(lim, x);</span><br><span class="line">        s[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lim; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!s[i].<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">sort</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(s[i].<span class="built_in">begin</span>(), s[i].<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        a[i].<span class="built_in">resize</span>(m / i + <span class="number">5</span>);</span><br><span class="line">        a[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; a[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> &lt; s[i].<span class="built_in">size</span>())</span><br><span class="line">                a[i][j] += s[i][j - <span class="number">1</span>];</span><br><span class="line">            a[i][j] += a[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">            g[j] = f[j];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt;= m; k += i)</span><br><span class="line">                t[++c] = k;</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">solve</span>(c, i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        cout &lt;&lt; f[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;accelerated-01-knapsack-algorithm-and-the-quadrangle-inequality&quot;&gt;Accelerated
01 Knapsack Algorithm and the Quadrangle Inequality&lt;/h1</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Multivariable Inequalitys - Finding the dual</title>
    <link href="https://7ue9ueue.github.io/2023/09/10/%E4%B8%AD%E6%96%87/Dual%20Inequality/"/>
    <id>https://7ue9ueue.github.io/2023/09/10/%E4%B8%AD%E6%96%87/Dual%20Inequality/</id>
    <published>2023-09-09T16:00:00.000Z</published>
    <updated>2023-09-10T03:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="multivariable-inequalitys---dual-inequality">MultivariableInequalitys - Dual Inequality</h1><p>As a method from《不等式的秘密》(Secrets of Inequalities)</p><h1 id="introduction">Introduction</h1><p>In Lagrange multiplier method, its often given that</p><p><span class="math display">\[ g(\texttt{v}) = 0\]</span></p><p>and the function</p><p><span class="math display">\[ f(\texttt{v}) \geq 0\]</span></p><p>is to be proved.</p><p>Many times, g is simpler than f. Then can we swap f and g, in otherwords, prove that:</p><p><span class="math display">\[ f(\texttt{v}) = 0\]</span></p><p>and</p><p><span class="math display">\[ g(\texttt{v}) \geq 0\]</span></p><p>?</p><p>The answer is yes!</p><hr /><h1 id="the-idea">The Idea</h1><p>WLOG, the following inequalities will all have three variables.However, this method can be easily extended to more variable.</p><p>Consider</p><p><span class="math display">\[x+y+z=3\]</span></p><p>Show that <span class="math display">\[ x + y + z \geq xy + xz + yz\]</span></p><p>This may be hard to prove (is it?) But can we swap what is to beproved and what is given? Well, then we will have</p><p><span class="math display">\[ x+ y+ z = xy + xz + yz\]</span></p><p>And we have to show that</p><p><span class="math display">\[ x+y+z \geq 3\]</span></p><p>The two inequalities are equivlent. This method is called the dualinequality method. When the original inequality is complex, its dual isoften easy.</p><hr /><h1 id="the-method">The Method</h1><p>If <span class="math display">\[A: g(x,y,z) = 0, f(x,y,z) \geq 0\]</span></p><p><span class="math display">\[ B: g(x,y,z) \geq 0, f(x,y,z) = 0\]</span></p><p>First, try to show that (which is not hard, use the adjustment methodi.e replace x,y,z with tx,ty,tz) <span class="math display">\[ A \iffB\]</span></p><p>Second prove <span class="math display">\[B\]</span>.</p><hr /><h1 id="example-1">Example 1</h1><p><span class="math display">\[ xyz = 1 \]</span></p><p><span class="math display">\[\frac{1}{2+x} + \frac{1}{2+y} +\frac{1}{2+z} \leq 1\]</span></p><p>Dual:</p><p><span class="math display">\[\frac{1}{2+x} + \frac{1}{2+y} +\frac{1}{2+z} = 1\]</span></p><p><span class="math display">\[ xyz \leq 1 \]</span></p><p>Prove dual using substitution:</p><p><span class="math display">\[ a = \frac{1}{2+x},b = \frac{1}{2+y},c =\frac{1}{2+z}\]</span></p><p>Then want to show:</p><p><span class="math display">\[ (1-2a)(1-2b)(1-2c) \leq abc\]</span></p><p>where</p><p><span class="math display">\[ a+b+c = 1 \]</span></p><p>Then want to show:</p><p><span class="math display">\[ (a+b-c)(a+c-b)(b+c-a) \leq abc\]</span></p><p>This is schur's inequlity.</p><hr /><h1 id="example-2">Example 2</h1><p><span class="math display">\[a,b,c&gt;0, ab+bc+ac = 3\]</span></p><p><span class="math display">\[ \sqrt{a+3} + \sqrt{b+3} + \sqrt{c+3}\geq 6\]</span></p><p>Dual:</p><p><span class="math display">\[a,b,c&gt;0, ab+bc+ac \leq 3\]</span></p><p><span class="math display">\[ \sqrt{a+3} + \sqrt{b+3} + \sqrt{c+3} =6\]</span></p><p>Subtitution:</p><p><span class="math display">\[ x = \sqrt{a+3}, y = \sqrt{b+3}, z =\sqrt{c+3}\]</span></p><p>Equivlent to:</p><p><span class="math display">\[ x+ y+ z = 6\]</span></p><p><span class="math display">\[(x^2-3)(y^2-3)+ (x^2-3)(z^2-3)+(y^2-3)(z^2-3) \leq 3\]</span></p><p>Simplify:</p><p><span class="math display">\[x^2y^2 +y^2z^2 + z^2x^2 + 24 \leq 6(x^2+ y^2 + z^2)\]</span></p><p>Want to make this homogeneous, so:</p><p><span class="math display">\[6(x^2y^2 +y^2z^2 + z^2x^2 + 24) \leq(x+y+z)^2(x^2 + y^2 + z^2)\]</span></p><p><span class="math display">\[6(54x^2y^2 +54y^2z^2 + 54z^2x^2 +(x+y+z)^4) \leq 54(x+y+z)^2(x^2 + y^2 + z^2)\]</span></p><p><span class="math display">\[ 324\sum{x^2y^2}+6(\sum{x})^4 \leq54(\sum x)^2(\sum x^2)^2\]</span></p><p>Now use the total derivitive method.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;multivariable-inequalitys---dual-inequality&quot;&gt;Multivariable
Inequalitys - Dual Inequality&lt;/h1&gt;
&lt;p&gt;As a method from《不等式的秘密》(Secrets of</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Multivariable Inequalitys - The mechanisation  method</title>
    <link href="https://7ue9ueue.github.io/2023/09/08/%E4%B8%AD%E6%96%87/Mech%20Inequality/"/>
    <id>https://7ue9ueue.github.io/2023/09/08/%E4%B8%AD%E6%96%87/Mech%20Inequality/</id>
    <published>2023-09-07T16:00:00.000Z</published>
    <updated>2023-09-09T03:53:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1id="multivariable-inequalitys---the-mechanisation-method">MultivariableInequalitys - The mechanisation method</h1><p>As a method from《不等式的秘密》(Secrets In Inequalities)</p><h1 id="introduction">Introduction</h1><p>When I was studying Math Olympiad, I was struggling aboutinequalities. I know one method called Sum of Squares (SOS) that couldgive a good approach to a Homogeneous polynomial. But still, unavoidablythe solver still have to examine Schurs, AM-GM, and some otherinequalities to implement.</p><p>Although this approach is great, to some sense, its not universal. Itdoes not approach <strong>all</strong> inequality problems in<strong>one way</strong> and solve it.</p><p>So I always wounder if such method exists. When I studied andundergrad math, I notice a method called the Method of LagrangeMultiplier. This works really well in most cases. Still, solving such asystem of equations may be hard when the form of inequality is notpleasent.</p><p>For more complex inequalities, such as an inequality with threevariables, Lagrange Multiplier is actually also quite a difficultapproach.</p><p>So one day I watched this video introducing two methods: thediffertiation method and the dual inequality method.</p><p>Yes, there two methods are still far from universal. However, fromcommon inequality problems, these are sort of a mechanised method thatallows a direct approach to problems.</p><p>It works especially well when the polynomial is symetric.</p><hr /><h1 id="the-idea">The Idea</h1><p>Consider a polynomial <span class="math inline">\(f\)</span>,where</p><p><span class="math display">\[f(x_1,x_2,x_3,x_4,\cdots,x_n) \geq0\]</span></p><p>is too be proved.</p><p>Then imagive the whole input as one variable, can we in some form,write <span class="math inline">\(f(x_1,x_2,x_3,\cdots,x_n)\)</span> in<span class="math inline">\(f(t)\)</span>, and apply methods that solvesa single variable inequality?</p><p>As this is a polynomial, solving <span class="math inline">\(f(t)\geq 0\)</span> is much easier. One idea is that we have todifferentiate and examine <spanclass="math inline">\(f&#39;(t)\)</span>. After some analysis on <spanclass="math inline">\(f&#39;(t)\)</span>, proving the inequality mayactually be much easier.</p><p>This leads to the idea of writing the polynomial with one variable.This can similar to <strong>total derivative</strong>.</p><p>I will use three variables to illustrate how this algorithm work.However, this idea can be used on any number of variables.</p><p><span class="math display">\[\frac{\text{d}f}{\text{d}t} = \frac{\partial f}{\partialx}\frac{\text{d}x}{\text{d}t} +\frac{\partial f}{\partialy}\frac{\text{d}y}{\text{d}t} + \frac{\partial f}{\partialz}\frac{\text{d}z}{\text{d}t}\]</span></p><p>Now we are able to conside this new variable <spanclass="math inline">\(t\)</span> to deal with and treat the polynomialas a whole.</p><p>To let our df/dt satisfy better properties, here is most theessential idea of this method.</p><p>Let</p><p><span class="math display">\[\frac{\text{d}x}{\text{d}t} = \frac{\text{d}y}{\text{d}t} =\frac{\text{d}z}{\text{d}t} = 1\]</span></p><p>Then</p><p><span class="math display">\[D(f) = \frac{\text{d}f}{\text{d}t} = \frac{\partial f}{\partial x}+\frac{\partial f}{\partial y} + \frac{\partial f}{\partial z}\]</span></p><p>Note that <span class="math inline">\(D(f)\)</span> is a lineartransform and follows all rules that normal differtiation follows.</p><p>And the symetry of the inequality (that is to be proved) can be usedperfectly by this method.</p><p><span class="math display">\[D(f+g) = D(f)+D(g)\]</span></p><p><span class="math display">\[D(kf) = kD(f)\]</span></p><hr /><h1 id="the-method">The Method</h1><p>To prove <span class="math inline">\(f \geq 0\)</span> where <spanclass="math inline">\(x,y,z\geq 0\)</span>, do the following:</p><p>Step 1. Show <span class="math inline">\(f \geq 0 \iff xyz =0\)</span></p><p>Step 2. Show <span class="math inline">\(D(f) \geq 0\)</span></p><hr /><h1 id="why">Why?</h1><p>First, this method in many occasions work when than the Lagrangemultiplier method. <strong>The reason is that Step 1 is very easy if theinequality is symetric.</strong></p><p>Step 2 is actually also quite easy. The reason is because Step 2 canbe recursive. I.E: <span class="math inline">\(f \geq 0 \iff D(f) \iff 0\iff D(D(f)) \geq 0\)</span>.</p><hr /><h1 id="prove">Prove?</h1><p>For</p><p><span class="math display">\[f(x,y,z)\]</span></p><p>WLOG, assume <span class="math inline">\(z\)</span> to be thesmallest.</p><p>Then, consider</p><p><span class="math display">\[ g(t) =f((x-z)+t,(y-z)+t,(z-z)+t)\]</span></p><p><span class="math display">\[ \frac{\text{d}g}{\text{d}t} =\frac{\partial f}{\partial(x-z+t)} +\frac{\partial f}{\partial y(y-z+t)}+ \frac{\partial f}{\partial (z-z+t)}\]</span></p><p><span class="math display">\[ \frac{\text{d}f}{\text{d}t} =\frac{\partial f}{\partial (x-z+t)} \frac{d(x-z+t)}{dt}+\frac{\partialf}{\partial (y-z+t)} \frac{d(y-z+t)}{dt}+\frac{\partial f}{\partial(z-z+t)} \frac{d (z-z+t)}{d t}\]</span></p><p><span class="math display">\[ \frac{\text{d}f}{\text{d}t} =\frac{\partial f}{\partial (x-z+t)}+\frac{\partial f}{\partial(y-z+t)}+\frac{\partial f}{\partial (z-z+t)} =\frac{\text{d}g}{\text{d}t}\]</span></p><p><span class="math display">\[g&#39;(t) = D(f) \]</span></p><p>Then</p><p><span class="math display">\[ g(u) \geq g(0) , u \in \{x,y,z\}\]</span></p><p>Hence</p><p><span class="math display">\[f(x,y,z)\geq f(x-z,y-z,0) \geq 0\]</span></p><hr /><h1 id="example">Example</h1><p>I will only use this method. (Like L-Hospital)</p><p>Schur's</p><p><span class="math display">\[x^3+y^3+z^3 +3xyz \geq x^2y + x^2 z+y^2z + y^2x + z^2x + z^2y\]</span></p><p>Step 1</p><p><span class="math display">\[ x^3+y^3 \geq x^2y+y^2x\]</span></p><p>Step 1.1 (END)</p><p><span class="math display">\[ x^3 \geq 0\]</span></p><p>Step 1.2 <span class="math display">\[ 3x^2+3y^2 \geq x^2 + y^2 +4xy\]</span></p><p>Step 1.2.1 (END) <span class="math display">\[ 3x^2 \geqx^2\]</span></p><p>Step 1.2.2 (END) <span class="math display">\[ D(3x^2+3y^2) \geqD(x^2 + y^2 + 4xy)\]</span></p><p><span class="math display">\[ 6x+6y \geq 6x+6y\]</span></p><p>Step 2 <span class="math display">\[D(x^3+y^3+z^3 +3xyz) \geq D(x^2y+ x^2 z+ y^2z + y^2x + z^2x + z^2y)\]</span></p><p><span class="math display">\[ 3\sum_{sym}x^2 + 3\sum_{cyc} xy \geq2\sum_{sym} x^2 + 4\sum_{cyc} xy\]</span></p><p><span class="math display">\[ \sum_{sym}x^2  \geq  \sum_{cyc}xy\]</span></p><p><span class="math display">\[x^2+y^2+z^2  \geq  xy+yz+xz\]</span></p><p>Step 2.1</p><p><span class="math display">\[ x^2+y^2 \geq xy\]</span></p><p>Step 2.1.1 (END)</p><p><span class="math display">\[x^2 \geq 0\]</span></p><p>Step 2.1.2 (END)</p><p><span class="math display">\[ D(x^2+y^2) \geq D(xy)\]</span></p><p><span class="math display">\[ 2x+2y \geq 2x+2y\]</span></p><p>Step 2.2 (END)</p><p><span class="math display">\[D(x^2+y^2+z^2)  \geq  D(xy+yz+xz)\]</span></p><p><span class="math display">\[ 2x+2y+2z \geq  2x+2y+2z\]</span></p><hr /><h1 id="summary">Summary</h1><p>Just apply it mechanically if the equation is symetric. If not, Iwill cover it in the next article.</p><p>This is a detailed notes of the following video. Really like thismethod because I really stuck on inequalities.</p><p>https://www.bilibili.com/video/BV1rT411h7ej/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;multivariable-inequalitys---the-mechanisation-method&quot;&gt;Multivariable
Inequalitys - The mechanisation method&lt;/h1&gt;
&lt;p&gt;As a method from《</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Slow Fourier Transform</title>
    <link href="https://7ue9ueue.github.io/2023/08/16/%E4%B8%AD%E6%96%87/Slow%20Fourier%20Transform/"/>
    <id>https://7ue9ueue.github.io/2023/08/16/%E4%B8%AD%E6%96%87/Slow%20Fourier%20Transform/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2023-08-16T13:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Many people invent algorithms. So I decided to invent an algorithm.There is <strong>Fast</strong> Fourier Transform, but I think<strong>Slow</strong> Fourier Transform is not invented yet.</p><p>So in this article I invented <span class="math inline">\(O(n\sqrtn)\)</span> polynomial multiplication and named it <strong>Slow</strong>Fourier Transform.</p><p>The idea is very simple. Just make FFT into square root divide andconquer and do some calculations. Readers are encouraged to reimplementthis algorithm based on the former idea.</p><p>Technical details are omitted.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;complex&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">x = x*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="comment">//f[0] = (Poly) poly -&gt; fp</span></span><br><span class="line"><span class="comment">//f[1] = (Result of DFT) points on original -&gt; fr</span></span><br><span class="line"><span class="comment">//f[2] = points on sqrt decomp -&gt; fs </span></span><br><span class="line">complex&lt;<span class="type">double</span>&gt; f[<span class="number">3</span>][maxn];</span><br><span class="line">complex&lt;<span class="type">double</span>&gt; g[<span class="number">3</span>][maxn];</span><br><span class="line"><span class="comment">//w^n = 1</span></span><br><span class="line">complex&lt;<span class="type">double</span>&gt; w[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span> <span class="params">(complex&lt;<span class="type">double</span>&gt; (&amp;poly)[<span class="number">3</span>][maxn], <span class="type">int</span> n, <span class="type">bool</span> DFT)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> sqr = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    complex&lt;<span class="type">double</span>&gt; r = <span class="built_in">exp</span>(<span class="number">2</span>*Pi/n*<span class="number">1</span>i);</span><br><span class="line">    <span class="keyword">if</span> (!DFT) r.<span class="built_in">imag</span>(-r.<span class="built_in">imag</span>());</span><br><span class="line">    w[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=sqr*sqr;i++) w[i] = w[i<span class="number">-1</span>]*r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;sqr;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;sqr;k++) </span><br><span class="line">        &#123;</span><br><span class="line">            complex&lt;<span class="type">double</span>&gt; x = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;sqr;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                poly[<span class="number">2</span>][i*sqr+k] += x*poly[<span class="number">0</span>][j*sqr+i];</span><br><span class="line">                x = x*w[k*sqr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">0</span>;k&lt;sqr;k++)  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;sqr;j++) </span><br><span class="line">        &#123;</span><br><span class="line">            complex&lt;<span class="type">double</span>&gt; x = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;sqr;i++) </span><br><span class="line">            &#123;</span><br><span class="line">                poly[<span class="number">1</span>][k+sqr*j] += x*poly[<span class="number">2</span>][i*sqr+k];</span><br><span class="line">                x = x*w[k+sqr*j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(poly[<span class="number">1</span>],poly[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">memset</span>(poly[<span class="number">1</span>],<span class="number">0</span>,<span class="built_in">sizeof</span>(poly[<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">memset</span>(poly[<span class="number">2</span>],<span class="number">0</span>,<span class="built_in">sizeof</span>(poly[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) f[<span class="number">0</span>][i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++) g[<span class="number">0</span>][i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="type">int</span> d = m+n;</span><br><span class="line">    n = ((<span class="type">int</span>)<span class="built_in">sqrt</span>(n+m+<span class="number">2</span>)+<span class="number">1</span>)*((<span class="type">int</span>)<span class="built_in">sqrt</span>(n+m+<span class="number">2</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FFT</span>(f,n,<span class="number">1</span>);<span class="built_in">FFT</span>(g,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) f[<span class="number">0</span>][i] = f[<span class="number">0</span>][i]*g[<span class="number">0</span>][i];</span><br><span class="line">    <span class="built_in">FFT</span>(f,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=d;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(<span class="type">int</span>)(f[<span class="number">0</span>][i].<span class="built_in">real</span>()/n+<span class="number">0.49</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Many people invent algorithms. So I decided to invent an algorithm.
There is &lt;strong&gt;Fast&lt;/strong&gt; Fourier Transform, but I think
&lt;strong</summary>
      
    
    
    
    <category term="随笔Prose" scheme="https://7ue9ueue.github.io/categories/%E9%9A%8F%E7%AC%94Prose/"/>
    
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Generalized Suffix Automaton Study Notes</title>
    <link href="https://7ue9ueue.github.io/2023/06/21/%E4%B8%AD%E6%96%87/Suffix%20Automaton/"/>
    <id>https://7ue9ueue.github.io/2023/06/21/%E4%B8%AD%E6%96%87/Suffix%20Automaton/</id>
    <published>2023-06-21T08:08:00.000Z</published>
    <updated>2023-06-21T09:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>An OIer who don't know suffix automaton, is like a gamer that doesn'tplay Genshin Impact. - Said by me</p></blockquote><p>Suffix Automaton (SAM) is the ultimate algorithm for strings inOlympiad of Informatics. But its nonetheless useless because of obviousreasons. I personally prefers suffix array but SAM is too powerful sowhy not have a try？</p><p>This blog entry is very un-detailed because its for personal use.Please refer to https://oi-wiki.org/string/sam/ for a detailed analysisof SAM.</p><hr /><h4 id="brief">Brief</h4><p>There are two automatons in Olympiad of Informatics.</p><ol type="1"><li>ACAM</li><li>SAM</li></ol><p>I think in nature, the -AMs store the information of the strings in acompressed <code>Directed Acyclic Graph</code>, while having another<code>Tree</code> to show the connection between each substring.</p><p>In other words, you can either choose the<code>Directed Acyclic Graph</code> or the <code>Tree</code> to solvethe problem. The latter is often better.</p><hr /><h4 id="notations">Notations</h4><p><span class="math inline">\(\text{len}(s)\)</span> length of<code>string</code> s.</p><p><span class="math inline">\(\delta(v,s)\)</span> transition from<code>node</code> <span class="math inline">\(v\)</span> by a path of<code>string</code> <span class="math inline">\(s\)</span>.</p><p><span class="math inline">\(\text{endpos}(s)\)</span> The<code>set</code> of end points in the original string that has<code>string</code> <span class="math inline">\(s\)</span> as asubstring.</p><p><span class="math inline">\(\text{parent}(v)\)</span> parent of<code>node</code> <span class="math inline">\(v\)</span> in the tree</p><p><span class="math inline">\(\text{max}(v)\)</span> the longestsubstring represented by the <code>node</code> <spanclass="math inline">\(v\)</span>.</p><p><span class="math inline">\(\text{min}(v)\)</span> the shortestsubstring represented by the <code>node</code> <spanclass="math inline">\(v\)</span>.</p><hr /><h4 id="dag">DAG</h4><p><code>SAM</code> stores the information about the suffix stringsusing a similar structure as the <code>Trie</code> tree. However,"useless" nodes are merged so that it becomes a <code>DAG</code>.</p><p><code>SAM</code>'s <code>DAG</code> contains all substrings of theoriginal string. Represented by a path from the root node <spanclass="math inline">\(\varphi\)</span>.</p><p>Denote the transition from one node to another node in the<code>DAG</code> as <span class="math inline">\(\delta(v,c)\)</span>where <span class="math inline">\(v\)</span> is a node and <spanclass="math inline">\(c\)</span> is a character. This also means to adda character at the back of the strings at node <spanclass="math inline">\(v\)</span>.</p><p>Yes, one node can represent multiple strings in <code>SAM</code>which is very special. This is very likely because <code>SAM</code> ishighly compressed with memory complexity of <spanclass="math inline">\(O(N)\)</span>.</p><p>But what rule do we merge two nodes? We compare the <spanclass="math inline">\(\text{endpos}(u)\)</span> and <spanclass="math inline">\(\text{endpos}(v)\)</span>. If they are the same,they are merged.</p><hr /><h4 id="tree">Tree</h4><p><span class="math inline">\(\text{parent}(v) = f\)</span> if and onlyif</p><p><span class="math display">\[\text{endpos}(\max(v)) \subsetneq\text{endpos}(\max(f))\]</span></p><p>or if and only if</p><p><span class="math display">\[\text{len}(\min (v)) =\text{len}(\max(f))+1\]</span></p><p>And the <span class="math inline">\(\text{parent}(v)\)</span>function forms a tree.</p><hr /><h4 id="complexity">Complexity</h4><p>Completely Linear.</p><hr /><h4 id="generalised">Generalised</h4><p>How about multiple strings? A incorrect way is to connect themultiple strings with a <code>#</code>. But the time complexity could bevery bad.</p><p>Here is a Method by 刘研绎,2015《后缀自动机在字典树上的拓展》</p><p>Steps:</p><ol type="1"><li><p>Build a <code>trie</code> tree</p></li><li><p><code>BFS</code> the root of the <code>trie</code> tree andrecord the parent node for each node</p></li><li><p>Build <code>SAM</code> using the <code>BFS</code> order.</p></li></ol><hr /><h4 id="code">Code</h4><p>Accepted on Luogu <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],c[maxn],sz[maxn];</span><br><span class="line"><span class="type">int</span> ans,n;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">    <span class="type">int</span> lst, pter;</span><br><span class="line">    <span class="type">int</span> ch[maxn*<span class="number">2</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> fa[maxn*<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> l[maxn*<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ins</span> <span class="params">(<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = lst;<span class="type">int</span> np = ++pter;</span><br><span class="line">        lst = np;l[np] = l[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p&amp;&amp;!ch[p][c]) &#123;</span><br><span class="line">            ch[p][c] = np;</span><br><span class="line">            p = fa[p];</span><br><span class="line">        &#125;</span><br><span class="line">        sz[np] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">            fa[np] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> q = ch[p][c];</span><br><span class="line">        <span class="keyword">if</span> (l[p]+<span class="number">1</span>==l[q]) &#123;</span><br><span class="line">            fa[np] = q;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> nq = ++pter;</span><br><span class="line">        l[nq] = l[p]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="built_in">sizeof</span>(ch[q]));</span><br><span class="line">        fa[nq] = fa[q];</span><br><span class="line">        fa[q] = fa[np] = nq;</span><br><span class="line">        <span class="keyword">while</span> (ch[p][c]==q) &#123;</span><br><span class="line">            ch[p][c] = nq;</span><br><span class="line">            p = fa[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        s = <span class="string">&quot;#&quot;</span>+s;</span><br><span class="line">        lst = pter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="built_in">ins</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calc</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=pter;i++) c[l[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=pter;i++) c[i] += c[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=pter;i++) a[c[l[i]]--] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=pter;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="type">int</span> p = a[i];</span><br><span class="line">            sz[fa[p]] += sz[p];</span><br><span class="line">            <span class="keyword">if</span> (sz[p]&gt;<span class="number">1</span>) ans = <span class="built_in">max</span>(ans,sz[p]*l[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SAM sam;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    sam.<span class="built_in">build</span>();</span><br><span class="line">    sam.<span class="built_in">calc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr /><h4 id="reference">Reference</h4><p>https://oi-wiki.org/string/general-sam/</p><p>https://oi-wiki.org/string/sam/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;An OIer who don&#39;t know suffix automaton, is like a gamer that doesn&#39;t
play Genshin Impact. - Said by me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Analysis Revision Chapter 1</title>
    <link href="https://7ue9ueue.github.io/2023/06/20/%E4%B8%AD%E6%96%87/Analysis%201/"/>
    <id>https://7ue9ueue.github.io/2023/06/20/%E4%B8%AD%E6%96%87/Analysis%201/</id>
    <published>2023-06-20T03:34:00.000Z</published>
    <updated>2023-06-21T08:06:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>I didn't update study notes for awhile because I realized something.I don't what what something is but I realized something. If could be oneof the following</p></blockquote><blockquote><ol type="1"><li>I don't understand what the book is saying</li><li>I don't understand what the book is saying</li><li>I'm sick</li><li>The problems are too hard</li><li>I don't understand what the book is saying</li><li>I want to do olympiad</li><li>I don't want to do olympiad</li><li>I want to play puzzles</li><li>Analysis and Linear Algebra is too hard</li><li>Analysis and Linear Algebra is very hard</li></ol></blockquote><p>Honestly I don't really get what analysis is doing. I hope someonecan tell what analysis is all about. I want to read Complex Analysis butI realize my analysis skills is too weak so lets review someanalysis.</p><p>I think i can solve the problems in the book but I just don't get theidea?</p><p>I like to read Linear Algebra because its quite practical. But Idon't really again understand that Jordan thing and how thats useful. Ireally don't know how these things are useful. That chapter about theJordan thing completely wiped me out so I will do some lighter stufflike analysis which doesn't seems light so maybe do number theory? Orshould I just do my personal statement?</p><p>I think I prefer olympiad questions more. Even if it uses linearalgebra group theory analysis or whatever.</p><p>I don't seem practical uses of each idea... maybe I read the wrongbook?</p><p>I think the plan is to review forier transform and begin readingcomplex analysis. And in the mean time I'll take some rest because thereis no more olympiad for me.</p><h4 id="数学分析中的具体问题与方法-chapter-1">数学分析中的具体问题与方法Chapter 1</h4><h4 id="limits-definition">Limits Definition</h4><p>If <span class="math inline">\(\lim_{n\to \infin} x_n = A\)</span>,then by definition, <span class="math inline">\(\forall \epsilon &gt;0\)</span>, <span class="math inline">\(\exist \delta &gt; 0\)</span>,such that when <span class="math inline">\(n&gt;\delta\)</span>, <spanclass="math inline">\(|x_n-A|&lt;\epsilon\)</span>.</p><h4 id="example">Example</h4><p>Show that</p><p><span class="math display">\[ \lim_{n \to \infin}(n+1)^{1/n}=1\]</span></p><p>By Definition, we need to find some finite <spanclass="math inline">\(n\)</span> such that</p><p><span class="math display">\[|(n+1)^{1/n}-1|&lt;\epsilon\]</span></p><p>Which is hard <span class="math display">\[ a =(n+1)^{1/n}-1\]</span></p><p>So the idea is to enlarge <span class="math inline">\(a\)</span></p><p><span class="math display">\[ (1+n) = (1+a)^n =\sum_{k}\binom{n}{k}a^{k} &lt; \frac{n(n-1)}{2}a^2 \]</span></p><p>Hence <span class="math display">\[ a &lt;\frac{2}{\sqrt{n-1}}\]</span></p><p>So</p><p><span class="math display">\[|(n+1)^{1/n}-1| = |a| &lt;|\frac{2}{\sqrt{n-1}}|&lt;\epsilon \]</span></p><p>So when <span class="math inline">\(n\)</span> is super large, namely<span class="math inline">\(n &gt; \frac{4}{\epsilon^2}+1\)</span>,inequality holds. By definition, let <span class="math inline">\(\delta= \frac{4}{\epsilon^2}+1\)</span> and inequality is proved.</p><hr /><h4 id="cauchys-rule">Cauchy's Rule</h4><blockquote><p>Don't need to know what is the limit.</p></blockquote><p><span class="math inline">\(x_n\)</span> converges iff <spanclass="math inline">\(\forall \epsilon &gt; 0\)</span>, <spanclass="math inline">\(\exist \delta &gt; 0\)</span>, <spanclass="math inline">\(n&gt;N\)</span>,<spanclass="math inline">\(|x_{n+p}-x_n|&lt;\epsilon\)</span>.</p><h4 id="example-1">Example</h4><p><span class="math display">\[x_n = \sum_{i=1}^n \frac{\sini}{2^i}\]</span></p><p><span class="math display">\[|x_{n+p}-x_n|=\sum_{i=n+1}^{n+p}\frac{\sin i}{2^i} \leq \sum_{i=n+1}^{n+p} \frac{1}{2^i}\leq  \frac{1}{2^{n}}&lt;\frac{1}{n}&lt;\epsilon\]</span></p><p>So let</p><p><span class="math display">\[\epsilon &gt; \frac{1}{n}\]</span></p><p><span class="math display">\[N = \frac{1}{\epsilon}\]</span></p><hr /><h4 id="reversed-cauchys-rule">Reversed Cauchy's Rule</h4><p><span class="math inline">\(x_n\)</span> diverges iff <spanclass="math inline">\(\exist \epsilon &gt; 0\)</span>, <spanclass="math inline">\(\forall \delta &gt; 0\)</span>, <spanclass="math inline">\(n&gt;N\)</span>,<spanclass="math inline">\(|x_{n+p}-x_n|&lt;\epsilon\)</span>.</p><hr /><h4 id="simple-taylor-expansion">Simple Taylor Expansion</h4><p><span class="math display">\[ x \sim \sin x \sim \tan x \sim \arcsinx \sim \arctan x\]</span></p><p><span class="math display">\[x \sim \ln(1+x) \sim e^x-1 \sim\frac{a^x-1}{\ln a} \sim \frac{(1+x)^a-1}{a}\]</span></p><p><span class="math display">\[1-\cos x \sim \frac{1}{2}x^2\]</span></p><blockquote><p>Used only in multiplication and division</p></blockquote><hr /><h4 id="important-limits">Important Limits</h4><blockquote><p>if the limit for both functions are suitable for each case. I didn'twrite the condition because i have a stomach ache and i think thecondition is obvious</p></blockquote><p><span class="math display">\[\lim_{x \to a} f(x)^{g(x)} = \lim_{x \toa} f(x)^{\lim_{x \to a}g(x)}\]</span></p><p><span class="math display">\[\lim_{x \to a} (1+f(x))^{g(x)} =\exp{(f(x)g(x))}\]</span></p><hr /><h4 id="lhospitals-rule">L'Hospital's Rule</h4><blockquote><p>same, condition is omitted</p></blockquote><p><spanclass="math display">\[\lim_{x}\frac{f(x)}{g(x)}=\lim_{x}\frac{f&#39;(x)}{g&#39;(x)}\]</span></p><hr /><h4 id="using-integration">Using Integration</h4><blockquote><p>Omitted</p></blockquote><hr /><h4 id="stolz-formula">Stolz Formula</h4><blockquote><p>inf/inf, hope you get what i mean D for difference</p></blockquote><p><span class="math display">\[\lim_{n}\frac{Df_n}{Dg_n}=A \to\lim_{n}\frac{f_n}{g_n}=A\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;I didn&#39;t update study notes for awhile because I realized something.
I don&#39;t what what something is but I realized something</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
  </entry>
  
  <entry>
    <title>Method of Lagrange Multiplier with Single Constraint</title>
    <link href="https://7ue9ueue.github.io/2023/06/19/%E4%B8%AD%E6%96%87/Lagrange%20multiplier%20with%20Single%20Constraint/"/>
    <id>https://7ue9ueue.github.io/2023/06/19/%E4%B8%AD%E6%96%87/Lagrange%20multiplier%20with%20Single%20Constraint/</id>
    <published>2023-06-19T09:00:00.000Z</published>
    <updated>2023-06-19T09:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="problem">Problem</h4><p>Consider a set of optimization problems in form of:</p><p>Given</p><p><span class="math display">\[ g(x,y,z) = 0\]</span></p><p>Find</p><p><span class="math display">\[\max(f(x,y,z))\]</span></p><p>Or</p><p><span class="math display">\[\min(f(x,y,z))\]</span></p><hr /><h4 id="method">Method</h4><p>Define</p><p><span class="math display">\[L(x,y,z,\lambda) = f(x,y,z)-\lambdag(x,y,z)\]</span></p><p>or in short</p><p><span class="math display">\[ L = f - \lambda g\]</span> then anylocal maximum or minimum of the function should satisfy:</p><p><span class="math display">\[ \frac{\partial L}{\partial x} =\frac{\partial L}{\partial y} = \frac{\partial L}{\partial z}=\frac{\partial L}{\partial \lambda}=0\]</span></p><hr /><h4 id="deduction">Deduction</h4><p>Consider the gradient of <span class="math inline">\(f\)</span> thatrepresents the "direction and rate of fastest increase":</p><p><span class="math display">\[\Delta f = (\frac{\partial f}{\partialx}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partialz})^T\]</span></p><p>The reason is because</p><p><span class="math display">\[\text{d}f = \frac{\partial f}{\partialx}\text{d}x+\frac{\partial f}{\partial y}\text{d}y+\frac{\partialf}{\partial z}\text{d}z\]</span></p><p>so</p><p><span class="math display">\[\text{d}f = (\frac{\partial f}{\partialx}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partialz})^T\times(\text{d}x,\text{d}y,\text{d}z) \]</span></p><p><span class="math display">\[(df)^2 = ((\frac{\partial f}{\partialx})^2 + (\frac{\partial f}{\partial y})^2+ (\frac{\partial f}{\partialz})^2)((\text{d}x)^2+(\text{d}y)^2+(\text{d}z)^2)\cos^2\theta\]</span></p><p><span class="math display">\[(df)^2 =(\Deltaf)((\text{d}x)^2+(\text{d}y)^2+(\text{d}z)^2)\cos^2 \theta\]</span></p><p>so when <span class="math inline">\(\cos \theta\)</span> is largest,which means that the gradient is perpendicular to the "direction of thecurved surface", the rate of change of the <spanclass="math inline">\(f\)</span> function is the largest.</p><p>In this type of problems, <span class="math inline">\(g\)</span>determines the direction of the curve surface. So the direction of <spanclass="math inline">\(g\)</span> should be perpendicular to the gradientof <span class="math inline">\(f\)</span> at the local maximum orminimum.</p><p>In other words,</p><p><span class="math display">\[ \Delta f = \lambda \Deltag\]</span></p><p><span class="math display">\[ \Delta f - \lambda \Delta g =0\]</span></p><p><span class="math display">\[ \Delta L = 0\]</span></p><p>This is not a strict prove but it shows how this theory makesense.</p><hr /><h4 id="extended">Extended</h4><p>If there are multiple constraints, then</p><p><span class="math display">\[ \frac{\partial L}{\partial x} =\frac{\partial L}{\partial y} = \frac{\partial L}{\partial z}=\frac{\partial L}{\partial \lambda_1} = \frac{\partial L}{\partial\lambda_2} = \cdots = \frac{\partial L} {\partial\lambda_n}=0\]</span></p><p>Prove or deduction is ommited because I don't know how to prove ordeduce this.</p><hr /><h4 id="exercise">Exercise</h4><p><span class="math display">\[g(x,y) = x^2+y^2-1\]</span></p><p><span class="math display">\[f(x,y) = (x+1)(y+2)\]</span></p><p><span class="math display">\[L(x,y,\lambda) =(xy+2x+y+2)-\lambda(x^2+y^2-1)\]</span></p><p>Use the method</p><p><span class="math display">\[\frac{\partial L}{\partial x} =(y+2)-\lambda(2x)=0\]</span></p><p><span class="math display">\[\frac{\partial L}{\partial y} =(x+1)-\lambda(2y)=0\]</span></p><p><span class="math display">\[\frac{\partial L}{\partial \lambda} =x^2+y^2-1=0\]</span></p><p>clean</p><p><span class="math display">\[y+2-2\lambda x= 0\]</span></p><p><span class="math display">\[x+1-2 \lambda y= 0\]</span></p><p><span class="math display">\[x^2+y^2 = 1\]</span></p><p>solve to obtain</p><p><span class="math display">\[4x^4 + 4x^3 +x^2 -2x - 3 =0\]</span></p><p>the final steps are left for the readers to complete</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;problem&quot;&gt;Problem&lt;/h4&gt;
&lt;p&gt;Consider a set of optimization problems in form of:&lt;/p&gt;
&lt;p&gt;Given&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[ g(x,y</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Counting Problem</title>
    <link href="https://7ue9ueue.github.io/2023/06/15/%E4%B8%AD%E6%96%87/%E6%80%80%E5%BF%83%E4%B8%80%E9%A2%98%20%E7%BB%84%E5%90%88%E6%81%92%E7%AD%89%E5%BC%8F/"/>
    <id>https://7ue9ueue.github.io/2023/06/15/%E4%B8%AD%E6%96%87/%E6%80%80%E5%BF%83%E4%B8%80%E9%A2%98%20%E7%BB%84%E5%90%88%E6%81%92%E7%AD%89%E5%BC%8F/</id>
    <published>2023-06-15T05:20:00.000Z</published>
    <updated>2023-06-16T07:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Problem</p><p><span class="math display">\[ f_{n,m}(x) =\sum_{K,F,C,V,5,0}(x^2-1)^{k-1}x^{2-2k}x^{\sum_{1\leq l_1 &lt; l_2 \leqk}{a_{l_2}b_{l_1}}-a_{l_1}b_{l_2}}x^{\sum_{1\leq l \leq k}\gcd({a_l,b_l})}\]</span></p><p>where</p><p><span class="math display">\[ K: k\geq 1\]</span></p><p><span class="math display">\[ F:0&lt;\frac{a_1}{b_1}&lt;\frac{a_2}{b_2}&lt;\cdots&lt;\frac{a_k}{b_k}&lt; 1\]</span></p><p><span class="math display">\[C: \sum_{i=1}^k a_i = m\]</span></p><p><span class="math display">\[V: \sum_{i=1}^k b_i = n\]</span></p><p><span class="math display">\[5:\forall a_i \in\text{Z}_{&gt;0}\]</span></p><p><span class="math display">\[0:\forall b_i \in\text{Z}_{&gt;0}\]</span></p><p>Show that</p><p><span class="math display">\[ f_{n,m}(x) =x^{mn-m^2-n+2}\]</span></p><hr /><p>Solution:</p><p>Solve step by step, part by part.</p><p>Assume that each of <span class="math inline">\((a_i,b_i)\)</span> isa vector, where b is x-axis and a is y-axis.</p><p><span class="math display">\[\sum_{1\leq l_1 &lt; l_2 \leqk}{a_{l_2}b_{l_1}}-a_{l_1}b_{l_2} = \sum_{1\leq l_1 &lt; l_2 \leq k}\det(\begin{bmatrix}a_{l_2} &amp; a_{l_1} \\b_{l_2} &amp; b_{l_1}\end{bmatrix}) = \sum_{1\leq l_1 &lt; l_2 \leq k}\det(\texttt{v}_{l_2},\texttt{v}_{l_1})\]</span></p><p><span class="math display">\[\sum_{1\leq l_1 &lt; l_2 \leq k}\det(\texttt{v}_{l_2},\texttt{v}_{l_1}) = \sum_{1\leq l_1 \leq k-1}\sum_{l_1+1\leq l_2 \leq k}\det({\texttt{v}_{l_2},\texttt{v}_{l_1}})=\sum_{1\leq l_1 \leqk}\det(\sum_{l_1+1\leq l_2 \leq k}{\texttt{v}_{l_2},\texttt{v}_{l_1}})\]</span></p><p><span class="math display">\[ \sum_{1\leq l_1 \leqk}\det(\sum_{l_1+1\leq l_2 \leq k} {\texttt{v}_{l_2},\texttt{v}_{l_1}})= \sum_{1\leq l_1 \leqk}\det(\texttt{s}_k-\texttt{s}_{l_1},\texttt{v}_{l_1}) = \sum_{1\leq l_1\leq k}\det(-\texttt{s}_{l_1},\texttt{v}_{l_1})\]</span></p><p>Shoelace Theorem</p><p><span class="math display">\[\sum_{l=1}^{k-1}-\det(\texttt{s}_{l_1-1},\texttt{v}_{l_1}) =2\text{Area}(\text{Polygon}(\texttt{v}_1,\texttt{v}_2,\cdots,\texttt{v}_k,-\texttt{s}_k))= 2A\]</span></p><hr /><p>Pick Theorem. Consider</p><p><span class="math display">\[\text{Polygon}(\texttt{v}_1,\texttt{v}_2,\cdots,\texttt{v}_k,-m\texttt{j},-n\texttt{i})\]</span></p><p>As</p><p><span class="math display">\[A = i+\frac{b}{2}-1\]</span></p><p><span class="math display">\[\sum_{1\leq l \leq k}\gcd({a_l,b_l})+n+m = b\]</span></p><p><span class="math display">\[ nm-2A = 2i + \sum_{1\leq l \leq k}\gcd({a_l,b_l}) +n+m-2\]</span></p><p><span class="math display">\[ 2A+ \sum_{1\leq l \leqk}\gcd({a_l,b_l}) = mn-n-m+2-2i\]</span></p><hr /><p>Simplify the original equation</p><p><span class="math display">\[ f_{n,m}(x) =\sum_{\cdots}(x^2-1)^{k-1}x^{2-2k}x^{mn-n-m+2-2i}\]</span></p><p>Rewrite as</p><p><span class="math display">\[ f_{n,m}(x) =x^{mn-n-m+2}\sum_P(1-\frac{1}{x^2})^{k(P)-1}(\frac{1}{x^2})^{i(P)}\]</span></p><p>where</p><p><span class="math display">\[P:\text{Polygon}(\texttt{v}_1,\texttt{v}_2,\cdots,\texttt{v}_k,-\texttt{s}_k)\text{is a convex polygon}\]</span></p><p>By imagining a path along a grid from <spanclass="math inline">\((0,0)\)</span> to <spanclass="math inline">\((n,m)\)</span>.</p><hr /><p>Consider</p><p><spanclass="math display">\[x^{mn-n-m+2}\sum_P(1-\frac{1}{x^2})^{k(P)-1}(\frac{1}{x^2})^{i(P)}\]</span></p><p>since</p><p><span class="math display">\[\forall \frac{a_i}{b_i} &lt;1\]</span></p><p>there exist a right angle isosceles triangle where all points withincannot be selected as vertices of the convex polygon(hull). There are intotal</p><p><span class="math display">\[\frac{m(m-1)}{2}\]</span></p><p>of them.</p><p>Rewrite equation to</p><p><spanclass="math display">\[x^{mn-n-m+2}\sum_P(1-\frac{1}{x^2})^{v(P)}(\frac{1}{x^2})^{o(P)}(\frac{1}{x^2})^{\frac{m(m-1)}{2}}\]</span></p><p><spanclass="math display">\[x^{mn-n-m+2-m(m-1)}\sum_P(1-\frac{1}{x^2})^{v(P)}(\frac{1}{x^2})^{o(P)}\]</span></p><p>where</p><p><span class="math inline">\(v(P)\)</span> = number of vertices of theconvex hull/polygon</p><p><span class="math inline">\(o(P)\)</span> = number of points outsidethe convex hull/polygon.</p><p>*For clarity, if there are points that are colinear, the one that isa "turning point" is the vertex, and the others are "outside" the convexhull.</p><p>define</p><p><span class="math inline">\(i(P)\)</span> = number of points insidethe convex hull/polygon</p><p>I will now evaluate</p><p><spanclass="math display">\[S=\sum_P(1-\frac{1}{x^2})^{v(P)}(\frac{1}{x^2})^{o(P)}=\sum_P(1-\frac{1}{x^2})^{v(P)}(\frac{1}{x^2})^{o(P)}(1-\frac{1}{x^2}+\frac{1}{x^2})^{i(P)}\]</span></p><p><spanclass="math display">\[S=\sum_P\sum_{k=0}^{i(P)}\binom{i(P)}{k}(1-\frac{1}{x^2})^{v(P)+k}(\frac{1}{x^2})^{o(P)+i(P)-k}\]</span></p><p>Note</p><p><span class="math display">\[i(P)+o(P)+v(P) = \text{const.}\]</span>Consider</p><p><spanclass="math display">\[\binom{i(P)}{k}(\frac{1}{x^2})^{v(P)+k}\]</span></p><p>This process means select <span class="math inline">\(v(P)\)</span>points for vertice, then select <span class="math inline">\(k\)</span>points interior.</p><p>This is equivlent to finding a subset of points of size <spanclass="math inline">\(v(P)+k\)</span>. And then find its convex hull. Asthe convex hull for each subset is unique, the mapping is one toone.</p><p>Hence</p><p><span class="math display">\[S = \sum_{k=0}^{i(P)+o(P)+v(P)}\binom{i(P)+o(P)+v(P)}{k}(1-\frac{1}{x^2})^k(\frac{1}{x^2})^{i(P)+o(P)+v(P)-k}=1\]</span></p><p>So <span class="math display">\[ f_{n,m}(x) =x^{mn-n-m+2-m(m-1)}\]</span></p><p><span class="math display">\[  \boxed{f_{n,m}(x) =x^{mn-m^2-n+2}}\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Problem&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[ f_{n,m}(x) =
&#92;sum_{K,F,C,V,5,0}(x^2-1)^{k-1}x^{2-2k}x^{&#92;sum_{1&#92;leq l_1 &amp;lt; l_2 &#92;leq
k}{a_{l</summary>
      
    
    
    
    <category term="题解Solution" scheme="https://7ue9ueue.github.io/categories/%E9%A2%98%E8%A7%A3Solution/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
  </entry>
  
  <entry>
    <title>《兵马俑》</title>
    <link href="https://7ue9ueue.github.io/2023/06/14/%E4%B8%AD%E6%96%87/%E6%8A%BD%E8%B1%A1%E8%AF%97%E6%AD%8C%E4%B9%8B%E5%85%B5%E9%A9%AC%E4%BF%91/"/>
    <id>https://7ue9ueue.github.io/2023/06/14/%E4%B8%AD%E6%96%87/%E6%8A%BD%E8%B1%A1%E8%AF%97%E6%AD%8C%E4%B9%8B%E5%85%B5%E9%A9%AC%E4%BF%91/</id>
    <published>2023-06-14T02:50:00.000Z</published>
    <updated>2023-06-14T02:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="兵马俑">《兵马俑》</h1><p>啊路灯下的兵马俑<br />黑灰白灰和一块灰<br />啊大厦里的兵马俑<br />一个两个三个四个<br />啊地底下的兵马俑<br />红色紫色黄色红色<br />啊你心里的兵马俑<br />是否真的完美无瑕<br />我坐在长城下。</p><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;兵马俑&quot;&gt;《兵马俑》&lt;/h1&gt;
&lt;p&gt;啊路灯下的兵马俑&lt;br /&gt;
黑灰白灰和一块灰&lt;br /&gt;
啊大厦里的兵马俑&lt;br /&gt;
一个两个三个四个&lt;br /&gt;
啊地底下的兵马俑&lt;br /&gt;
红色紫色黄色红色&lt;br /&gt;
啊你心里的兵马俑&lt;br /&gt;
是否真的完美无瑕</summary>
      
    
    
    
    <category term="随笔Prose" scheme="https://7ue9ueue.github.io/categories/%E9%9A%8F%E7%AC%94Prose/"/>
    
    
    <category term="中文Chinese" scheme="https://7ue9ueue.github.io/tags/%E4%B8%AD%E6%96%87Chinese/"/>
    
    <category term="创作Creativity" scheme="https://7ue9ueue.github.io/tags/%E5%88%9B%E4%BD%9CCreativity/"/>
    
  </entry>
  
  <entry>
    <title>Elementary Number Theory Chapter 7 Study Notes</title>
    <link href="https://7ue9ueue.github.io/2023/06/12/%E4%B8%AD%E6%96%87/Number%20Theory%201/"/>
    <id>https://7ue9ueue.github.io/2023/06/12/%E4%B8%AD%E6%96%87/Number%20Theory%201/</id>
    <published>2023-06-12T08:02:00.000Z</published>
    <updated>2023-06-15T05:20:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初等数论-chapter-7">初等数论 Chapter 7</h1><h4 id="definition-continued-fraction">Definition ContinuedFraction</h4><blockquote><p>An approximation for irrational numbers or an representation ofrational numbers</p></blockquote><p><span class="math display">\[ \langle x_0,x_1,x_2,x_3,....x_n \rangle= \frac{1}{x_0+\frac{1}{x_1+...}}\]</span></p><h4 id="propertys">Propertys</h4><p>Define <span class="math display">\[\frac{P_n}{Q_n} = \langlex_0,x_1,x_2,....x_n \rangle\]</span></p><p>Then</p><p><strong>1.1</strong></p><p><span class="math display">\[P_nQ_{n-1} - P_{n-1}Q_n =(-1)^{n+1}\]</span></p><p><strong>1.2</strong></p><p><span class="math display">\[P_nQ_{n-2} - P_{n-2}Q_n = (-1)^nx_n\]</span></p><p><strong>1.3</strong></p><p><span class="math display">\[\langle x_0,x_1,x_2,....x_n\rangle-\langle x_0,x_1,x_2,....x_{n-1} \rangle = \frac{(-1)^{n+1}}{Q_nQ_{n-1}}\]</span></p><p><strong>1.4</strong></p><p><span class="math display">\[\langle x_0,x_1,x_2,....x_n\rangle-\langle x_0,x_1,x_2,....x_{n-2} \rangle = \frac{(-1)^{n}x_n}{Q_nQ_{n-2}}\]</span></p><p><strong>1.5</strong></p><p><span class="math display">\[P_n = x_n P_{n-1} + P_{n-2}\]</span></p><p><strong>1.6</strong></p><p><span class="math display">\[Q_n = x_n Q_{n-1} + Q_{n-2}\]</span></p><h4 id="pells-function">Pell's Function</h4><blockquote><p>Try use the knowledge from continued fraction to prove this! （Whichseams utterly impossible)</p></blockquote><p><span class="math display">\[ x^2 - Dy^2 = \plusmn 1\]</span></p><p><strong>General Solution</strong> <spanclass="math display">\[x_n+y_n\sqrt D = (x_0+y_0\sqrt D)^n\]</span></p><p><strong>Matrix Form</strong> <spanclass="math display">\[\begin{pmatrix}x_n  \\ y_n \end{pmatrix} =\begin{pmatrix}x_0 &amp; Dy_0  \\ y_0 &amp; x_0\end{pmatrix}\begin{pmatrix}x_0  \\ y_0 \end{pmatrix}\]</span></p><blockquote><p>Why? Assume $ x_1^2 - Dy_1^2 = 1$ and $ x_2^2 - Dy_2^2 = $, then$(x_1^2 - Dy_1<sup>2)(x_2</sup>2 - Dy_2^2) = (x_1x_2+Dy_1y_2)^2 -D(x_1y_2 -y_1x_2)^2 =1 $. So another solution can be formed bymultiplying them together! Rearrange to obtain the above form.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初等数论-chapter-7&quot;&gt;初等数论 Chapter 7&lt;/h1&gt;
&lt;h4 id=&quot;definition-continued-fraction&quot;&gt;Definition Continued
Fraction&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;An app</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数论Number Theory" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E8%AE%BANumber-Theory/"/>
    
  </entry>
  
  <entry>
    <title>Linear Alegebra Chapter 1,2,6 Study Notes</title>
    <link href="https://7ue9ueue.github.io/2023/06/12/%E4%B8%AD%E6%96%87/Linear%20Algebra%202/"/>
    <id>https://7ue9ueue.github.io/2023/06/12/%E4%B8%AD%E6%96%87/Linear%20Algebra%202/</id>
    <published>2023-06-12T02:42:11.000Z</published>
    <updated>2023-06-12T03:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高等代数学-chapter-126">高等代数学 Chapter 1,2,6</h1><h4 id="theorem-1.7.1">Theorem 1.7.1</h4><p>Laplace Theorem</p><p><span class="math display">\[ \det (A) = \sum_{\text{fix i or j}}A\begin{pmatrix}i_1 &amp; i_2 &amp; \cdots &amp; i_k \\j_i &amp; j_2 &amp; \cdots &amp; j_k\end{pmatrix}\hat{A} \begin{pmatrix}i_1 &amp; i_2 &amp; \cdots &amp; i_k \\j_i &amp; j_2 &amp; \cdots &amp; j_k\end{pmatrix}  \]</span></p><p>where</p><p><span class="math display">\[ A\begin{pmatrix}i_1 &amp; i_2 &amp; \cdots &amp; i_k \\j_i &amp; j_2 &amp; \cdots &amp; j_k\end{pmatrix} = \text{keep row i and column j}\]</span></p><p><span class="math display">\[ A\begin{pmatrix}i_1 &amp; i_2 &amp; \cdots &amp; i_k \\j_i &amp; j_2 &amp; \cdots &amp; j_k\end{pmatrix} = (-1)^{\sum i+j}\text{remove row i and columnj}\]</span></p><blockquote><p>helpful to calculate det for matrix that have alot of zeros</p></blockquote><blockquote><p>helpful to deduce an algebric expression of something</p></blockquote><h4 id="theorem-2.7.1">Theorem 2.7.1</h4><p>Cauchy-Binet Theorem</p><p><span class="math display">\[\det(AB) = \sum_{j}A\begin{pmatrix}1 &amp; 2 &amp; \cdots &amp; m \\j_i &amp; j_2 &amp; \cdots &amp; j_m\end{pmatrix} B  \begin{pmatrix}j_i &amp; j_2 &amp; \cdots &amp; j_m \\1 &amp; 2 &amp; \cdots &amp; m\end{pmatrix}  \]</span></p><blockquote><p>This means find the common length of matrix A and B. And Iterate allpossible choices of the other dimension.</p></blockquote><h4 id="definition-4.3.1">Definition 4.3.1</h4><p>if</p><p><span class="math display">\[ B = P^{-1}AP\]</span></p><p>then <span class="math display">\[B \sim A\]</span></p><h4 id="finding-a-good-similar-matrix">Finding a good similarmatrix</h4><p>let P be an array of eigenvectors <span class="math display">\[ P =(v_1,v_2,\cdots,v_n) \]</span></p><p>then</p><p><span class="math display">\[P^{-1}AP =\text{diag}(\lambda_1,\lambda_2,\cdots,\lambda_n)\]</span></p><p><span class="math display">\[AP =P\text{diag}(\lambda_1,\lambda_2,\cdots,\lambda_n)\]</span></p><p><span class="math display">\[AP =\text{diag}(\lambda_1,\lambda_2,\cdots,\lambda_n)P\]</span></p><p>so all matrix in this equation have a good shape</p><p>Step by Step method:</p><ol type="1"><li><p>Find the eigenvalues</p></li><li><p>Find the eigenvectors</p></li><li><p>Match the eigenvalues with eigenvectors</p></li><li><p><span class="math inline">\(P\)</span> is eigenvectors, <spanclass="math inline">\(P^{-1}AP\)</span> is eigenvalues</p></li></ol><h4 id="exercise">Exercise</h4><p>Find <span class="math inline">\(A^{10}\)</span></p><p><span class="math display">\[ A =\begin{pmatrix}1 &amp; 0 \\1 &amp; -2\end{pmatrix}  \]</span></p><p><span class="math display">\[ |A-\lambda I| = \begin{pmatrix}1-\lambda &amp; 0 \\1 &amp; -2-\lambda\end{pmatrix}   = 0\]</span></p><p><span class="math display">\[ (1-\lambda)(-2-\lambda)=0\]</span></p><p><span class="math display">\[ \lambda_1 = 1, \lambda_2 =-2\]</span></p><p>Step 1.</p><p><span class="math display">\[P^{-1}AP = \begin{pmatrix}1 &amp; 0 \\0 &amp; -2\end{pmatrix}\]</span></p><p><span class="math display">\[\begin{pmatrix}0 &amp; 0 \\1 &amp; -3\end{pmatrix}v_1=0\]</span></p><p><span class="math display">\[v_1 = (3,-1)^{T}\]</span></p><p><span class="math display">\[\begin{pmatrix}3 &amp; 0 \\1 &amp; 0\end{pmatrix}v_2=0\]</span></p><p><span class="math display">\[v_1 = (0,114514)^{T}\]</span></p><p>Step 2. <span class="math display">\[ P = \begin{pmatrix}3 &amp; 0 \\-1 &amp; 1\end{pmatrix}\]</span></p><p><span class="math display">\[A^{10} = P(P^{-1}AP)^{10}P^{-1}=  \begin{pmatrix}1 &amp; 0 \\1-2^{10} &amp; 2^{10}\end{pmatrix}  \]</span></p><h4 id="theorem-6.3.1">Theorem 6.3.1</h4><p>Cayley-Hamilton Theorem</p><p>let the eigenvalues of matrix A form</p><p><span class="math display">\[f(x) = \prod_{i=1}^n(\lambda_i-x)\]</span></p><p>then</p><p><span class="math display">\[f(A) = O\]</span></p><blockquote><p>Proofing this consider an upper triangular Matrix B that is similarto A</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高等代数学-chapter-126&quot;&gt;高等代数学 Chapter 1,2,6&lt;/h1&gt;
&lt;h4 id=&quot;theorem-1.7.1&quot;&gt;Theorem 1.7.1&lt;/h4&gt;
&lt;p&gt;Laplace Theorem&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math di</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>AIIO 和 AIME 游记</title>
    <link href="https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/AIIO%20%E5%92%8C%20AIME%20%E6%B8%B8%E8%AE%B0/"/>
    <id>https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/AIIO%20%E5%92%8C%20AIME%20%E6%B8%B8%E8%AE%B0/</id>
    <published>2023-06-11T11:35:12.000Z</published>
    <updated>2023-06-11T11:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aime-aioc-游记">AIME &amp; AIOC 游记</h1><p>这次是我第一次参加三题制的OI比赛, 感觉战术执行非常成功,虽然四个小时的时间浪费了五个小时, 然是还是暴力打满了</p><p>2022/02/09</p><p>考了AIME, 题目比较有挑战性, 还好后面的第14题和第15题看起来完全不会做,最后剩下半个小时对着完全不会做了两题莫名的思考了一下就去检查了,所以时间也还算充裕</p><p>第8题和第12题都讲过类似的题目, 算了小一个小时就算出来了,比较好玩的是第5题, 还好我在学校的数学课上认真听了物理的内容,然后应用一下就做出来了, 感觉很趣味</p><p>最后得分是12/15pts, 应该算是不错, 算是做了热身</p><p>2022/02/10</p><p>进入了考场, 开始按照顺序做题</p><p>第一题读完题发现题目的意思是给一棵树, 每个点有一个权值,求所有联通子图内权值和的最大值, 因此做法应该是</p><p><span class="math display">\[f[u] = \sum_{v \in\rm{Son}}\max(f[v],0)+p[u]\]</span></p><p>写了十分钟做出来了就去看第二题了(https://orac2.info/problem/aiio22hike/)</p><p>读完题发现了是个最短路径问题,跑两次最短路然后显然上山时只在乎下山路反之也相同,然后Dijkstra写错了调了半个小时发现没有带vis数组之后终于做出来了</p><p>然后就去看最后一题(https://orac2.info/problem/aiio22square/),读完题发现是个不可做题, 就先打暴力<spanclass="math inline">\(O(n^5)\)</span>了, 结果发现读错题了,不是求数量而是最大值, 可能存在优化的方法</p><p>首先题目的难点是一共有 <span class="math inline">\(O(n^3)\)</span>种可能的正方形, 思考了两个小时不太会做, 发现时间要没了, 赶紧写了一个<span class="math inline">\(O(n^3\log n)\)</span> 的做法,然后最后五分钟提交成功了, 其中发现数组开大了一惊一乍了十几分钟</p><p>最后得分是270/300pts, 应该是寄了</p><p>2022/02/20</p><p>Alpha比赛由于我莫名其妙很有自信, 没什么压力, 吃完饭就开始做题了</p><p>一共有四道题, 只有四个小时时间比较紧, 就抓紧看题了</p><p>第一题看起来不是很难, 写了写莫名其妙就过了</p><p>第二题看起来不是很难, 写了写莫名其妙就过了</p><p>第三题看起来不是很难, 写了写莫名其妙就过了</p><p>第四题是说有 <span class="math inline">\(n\)</span> 个人, 在 <spanclass="math inline">\(l_i\)</span> 到 <spanclass="math inline">\(r_i\)</span> 天来庙里旅游, inclusive.庙里有一个僧人, 僧人每天只能接待一位客人, 问使得每个人都能被接待 <spanclass="math inline">\(k\)</span> 次的 <spanclass="math inline">\(k\)</span> 最大是多少</p><p>写了写莫名其妙就挂了, 发现二分之后是个陷阱题, 对于 <spanclass="math inline">\(n\)</span> 条线段来说, 它们本身意义是不大的,而有意义的是它们所构成的交的线段的集合,发现了题目的本质之后好像就做了出来</p><p>看起来是提前两个小时做完了, 就去睡觉了, 400/400pts</p><p>2022/03/03</p><p>因为感觉FARIO没什么用, 就不是很紧张</p><p>第一题是说有 <span class="math inline">\(n\)</span> 个歌手拍成一队,实力分别是 <span class="math inline">\(a_i\)</span>.按照顺序从舞台左边进场, 右边出去, 其中歌手两两之间距离固定. 有 <spanclass="math inline">\(j\)</span> 名导师, 可以看到 <spanclass="math inline">\(l_i\)</span> 到 <spanclass="math inline">\(r_i\)</span> 范围内的歌手,然后每秒会给范围内实力最强的选手一分.</p><p>已知所有歌手每秒往右边移动一格, 求每个歌手的分数</p><p>发现导师的信息只有区间长度有关, 然后随便维护一下应该就可以了,大概是一个二维的数据结构, 考虑到时间很紧凑,我打算乱搞搞然后拿到了93分</p><p>第二题很难, 不会做, 就先跳过了</p><p>第三题是说给 <span class="math inline">\(n\)</span> 个圆心,要求构造一些圆, 使得这些圆互不相交, 并且周长尽量大.</p><p>题目看起来很乱搞, 但是往后读发现对答案精度要求很高, 就不知道怎么办了.高斯消元和差分约束都不太适合这个场景, 因为互不相交这个条件是不等式.</p><p>但是尽然发现了是不等式, 其实也刻画出了数学模型,</p><p><span class="math display">\[ (x_i-x_j)^2+(y_i-y_j)^2 ≤ r_i + r_j\]</span></p><p>其中左边是常数, 右边是我们需要最大化的变量,画图实验一下可以蒙到这个条件是当且仅当</p><p>然后写个线性规划就可以做出来了, 但是 <spanclass="math inline">\(n≤5000\)</span>, 而我写的是指数级的,不太懂怎么优化, 就硬着头皮写了,最后坚韧不拔的在坏掉的评测机上调试拿到了40.6分.</p><p>评测机坏了就顺便读一读第二题, 仔细读了读说的是有 <spanclass="math inline">\(n\)</span> 个人排成一列, 实力分别是 <spanclass="math inline">\(a_i\)</span>. 每次选择最左边的三个人决斗,留下中位数的那位玩家, 你需要维护一个数据结构:</p><p>修改 - 移动一个人的位置</p><p>查询 - 查询存活的人是谁</p><p>有一些部分分是只会修改前100个人和后100个人,还有一个部分分是只移动一个人, 这些部分分都挺简单的,可惜我前面花的时间很多, 后面花的时间很多, 最后就只写了后100个人的分</p><p>156.6/300pts</p><p>2022/03/07</p><p>问了问AIIO的奖项, 是银牌, 悲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;aime-aioc-游记&quot;&gt;AIME &amp;amp; AIOC 游记&lt;/h1&gt;
&lt;p&gt;这次是我第一次参加三题制的OI比赛, 感觉战术执行非常成功,
虽然四个小时的时间浪费了五个小时, 然是还是暴力打满了&lt;/p&gt;
&lt;p&gt;2022/02/09&lt;/p&gt;
&lt;p&gt;考了AIME,</summary>
      
    
    
    
    <category term="游记Diary" scheme="https://7ue9ueue.github.io/categories/%E6%B8%B8%E8%AE%B0Diary/"/>
    
    
    <category term="中文Chinese" scheme="https://7ue9ueue.github.io/tags/%E4%B8%AD%E6%96%87Chinese/"/>
    
    <category term="归档Archived" scheme="https://7ue9ueue.github.io/tags/%E5%BD%92%E6%A1%A3Archived/"/>
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
  </entry>
  
  <entry>
    <title>Inequality Revision 2</title>
    <link href="https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Inequalitys%202/"/>
    <id>https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Inequalitys%202/</id>
    <published>2023-06-11T11:18:00.000Z</published>
    <updated>2023-06-11T11:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inequalitys-with-one-variable">Inequalitys with onevariable</h1><h4 id="log">Log</h4><p><span class="math display">\[\frac{x}{1+x} \leq \ln(1+x) \leq x\]</span></p><p><span class="math display">\[\frac{1}{1+x} &lt; \ln(1+\frac{1}{x})&lt; \frac{1}{x} \]</span></p><h4 id="bernoulli">Bernoulli</h4><p>when n&gt;1</p><p><span class="math display">\[ (1+x)^n \geq 1+nx\]</span></p><p>when n&lt;1</p><p><span class="math display">\[(1+x)^n \leq 1+nx\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;inequalitys-with-one-variable&quot;&gt;Inequalitys with one
variable&lt;/h1&gt;
&lt;h4 id=&quot;log&quot;&gt;Log&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[&#92;frac{x}{1+x</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Inequality Revision 1</title>
    <link href="https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Inequalitys%201/"/>
    <id>https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Inequalitys%201/</id>
    <published>2023-06-11T10:57:11.000Z</published>
    <updated>2023-06-11T13:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="inequalitys-with-multi-variables">Inequalitys with multivariables</h1><h4 id="cauchy">Cauchy</h4><p><span class="math display">\[\sum_{i=1}^n(a_i^2)\sum_{i=1}^n(b_i^2)\geq \sum_{i=1}^n (a_ib_i)^2\]</span></p><h4 id="carlson">Carlson</h4><blockquote><p>k = 2 is Cauchy</p><p>k is the number of lists.</p></blockquote><p><span class="math display">\[\sum_{i=1}^n(a_i^k)\sum_{i=1}^n(b_i^k)...\sum_{i=1}^n(z_i^k)\geq\sum_{i=1}^n (a_i b_ic_i...z_i)^k\]</span></p><h4 id="jensen">Jensen</h4><blockquote><p>can be weighed</p></blockquote><p>concave</p><p><span class="math display">\[ f(\frac{\sum_{i=1}^n x_i}{n}) \geq\sum_{i=1}^n\frac{f(x_i)}{n}\]</span></p><p>convex</p><p><span class="math display">\[ f(\frac{\sum_{i=1}^n x_i}{n}) \leq\sum_{i=1}^n\frac{f(x_i)}{n}\]</span></p><h4 id="holder">Holder</h4><blockquote><p><span class="math inline">\(\frac{1}{p} + \frac{1}{q} = 1\)</span>,<span class="math inline">\(p = q = 2\)</span> is Cauchy</p></blockquote><p><span class="math display">\[\sum_{i=1}^n(a_i^p)^q\sum_{i=1}^n(b_i^q)^p\geq \sum_{i=1}^n (a_ib_i)^{pq}\]</span></p><h4 id="am-gm">AM-GM</h4><p>Define</p><p><span class="math display">\[ D(p) = \lim_{k \top}(\frac{x_i^k}{n})^{\frac{1}{k}}\]</span></p><p>Then</p><blockquote><p>QM AM GM HM Rule</p></blockquote><p><span class="math display">\[ D(2) \geq D(1) \geq D(0) \geqD(-1)\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;inequalitys-with-multi-variables&quot;&gt;Inequalitys with multi
variables&lt;/h1&gt;
&lt;h4 id=&quot;cauchy&quot;&gt;Cauchy&lt;/h4&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;&#92;[</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Linear Alegebra Chapter 5 Study Notes</title>
    <link href="https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Linear%20Alegebra%201/"/>
    <id>https://7ue9ueue.github.io/2023/06/11/%E4%B8%AD%E6%96%87/Linear%20Alegebra%201/</id>
    <published>2023-06-11T09:55:00.000Z</published>
    <updated>2023-06-12T02:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高等代数学-chapter-5">高等代数学 Chapter 5</h1><p>Chapter 5.10 Polynomials</p><h4 id="theorem-5.7.4">Theorem 5.7.4</h4><p>Eisenstein Method</p><p><span class="math display">\[ f(x) = \sum a_i x^i\]</span></p><p>cannot be divided other polynomials if</p><p><span class="math display">\[ p \not | a_n, p | a_i,p^2 \not |a_0\]</span> #### Definition 5.10.1 Sylvester Matrix</p><p><span class="math display">\[R(f,g)=\det(\left[\phantom{\begin{matrix}f_0\\ \ddots\\f_0\\b_0\\\ddots\\b_0 \end{matrix}}\right.\hspace{-1.5em}\underbrace{\begin{matrix}a_m &amp; \cdots &amp; a_0 &amp; \\\ddots &amp; &amp; \ddots &amp; \\&amp; a_m &amp; \cdots &amp; a_0 \\b_n &amp; \cdots &amp; b_0 &amp; \\\ddots &amp; &amp; \ddots &amp; \\&amp; b_n &amp; \cdots &amp; b_0\end{matrix}}_{m+n-i}\hspace{-1.5em}\left.\phantom{\begin{matrix}f_0\\ \ddots\\f_0\\b_0\\ \ddots\\b_0\end{matrix}}\right])\]</span></p><p>where</p><p><span class="math display">\[ f(x) = \sum_{i=0}^m a_ix^i\]</span></p><p><span class="math display">\[ g(x) = \sum_{i=0}^n b_ix^i\]</span></p><h4 id="theorem-5.10.1">Theorem 5.10.1</h4><p>Check for common roots for two polynomial</p><p><span class="math display">\[ R(f,g) \not = 0\]</span></p><h4 id="theorem-5.10.2">Theorem 5.10.2</h4><p><span class="math display">\[ R(f,g) = a_0^nb_0^m \prod_{i=1}^m\prod_{j=1}^n(x_i-y_j)\]</span></p><h4 id="theorem-5.10.3">Theorem 5.10.3</h4><p><span class="math display">\[ \Delta(f) =(-1)^{\frac{n(n-1)}{2}}\frac{R(f,f&#39;)}{a_0} = a_0^{2n-2} \prod_{i\leqj}(x_i-x_j)^2\]</span></p><p>If <span class="math inline">\(\Delta(f) = 0\)</span>, then there isno repeated roots.</p><blockquote><p>Recall that <span class="math inline">\(f(x)\)</span> have norepeated roots iff <span class="math inline">\(\deg(\gcd(f,f&#39;)) =0\)</span>. This can be used to prove 5.10.3.</p></blockquote><hr /><h4 id="exercise-1">Exercise 1</h4><p><span class="math display">\[f(x) = x^3+3x^2-x+4\]</span></p><p><span class="math display">\[g(x) = x^2-2x-1\]</span></p><p><span class="math display">\[R(f,f&#39;) = \det(\begin{bmatrix}1 &amp; 3 &amp; -1 &amp; 4 &amp; 0 \\0 &amp; 1 &amp; 3 &amp; -1 &amp; 4 \\1 &amp; -2 &amp; -1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; -2 &amp; -1 &amp; 0 \\0 &amp; 0 &amp; 1 &amp; -2 &amp; -1\end{bmatrix}) = \boxed{161}\]</span></p><h4 id="exercise-2">Exercise 2</h4><p>Find delta. <span class="math display">\[ f(x) = x^3 + px +q\]</span></p><p><span class="math display">\[ f&#39;(x) = 3x + p\]</span></p><p><span class="math display">\[R(f,f&#39;) = \det(\begin{bmatrix}1 &amp; 0 &amp; p &amp; q &amp; 0 \\0 &amp; 1 &amp; 0 &amp; p &amp; q \\3 &amp; 0 &amp; p &amp; 0 &amp; 0 \\0 &amp; 3 &amp; 0 &amp; p &amp; 0 \\0 &amp; 0 &amp; 3 &amp; 0 &amp; p\end{bmatrix}) = 27q^2+4p^3\]</span></p><p><span class="math display">\[ \boxed{\Delta(f) =(-1)^3(27q^2+4p^3)}\]</span></p><h4 id="exercise-3.1">Exercise 3.1</h4><p>Proof</p><p><span class="math display">\[R(f,g) = (-1)^{mn}R(g,f)\]</span></p><p><span class="math display">\[R(f,g) = a_0^nb_0^m \prod_{i=1}^m\prod_{j=1}^n(x_i-y_j) = a_0^nb_0^m (-1)^{mn} \prod_{i=1}^m\prod_{j=1}^n(y_j-x_i) = R(g,f)\]</span></p><h4 id="exercise-3.2">Exercise 3.2</h4><p>Proof</p><p><span class="math display">\[ R(af,bg) = a^m b^nR(f,g) \]</span></p><p><span class="math display">\[ R(af,bg) = a^na_0^nb^mb_0^m\prod_{i=1}^m \prod_{j=1}^n(x_i-y_j) = a^m b^nR(f,g)\]</span></p><h4 id="exercise-5">Exercise 5</h4><p>Proof</p><p><span class="math display">\[ R(f,g_1g_2) = R(f,g_1)R(f,g_2)\]</span></p><p><span class="math display">\[ R(f,g_1g_2) = a_0^{m+n} \prod_{i=1}^{t}g(x_i) \]</span></p><p><span class="math display">\[ R(f,g_1) = a_0^{m} \prod_{i=1}^tg_1(x_i) \]</span></p><p><span class="math display">\[ R(f,g_2) = a_0^{n} \prod_{i=1}^tg_2(x_i) \]</span></p><h4 id="exercise-6">Exercise 6</h4><p>Let <span class="math inline">\(a_0 = 1\)</span>. Given <spanclass="math inline">\(\Delta(f(x))\)</span>. Find <spanclass="math inline">\(\Delta(f(x^2))\)</span>.</p><p><span class="math display">\[\Delta(f(x)) = \prod_{i\leqj}(x_i-x_j)^2\]</span></p><p><span class="math display">\[\Delta(f(x^2)) = \prod_{i\leqj}(\sqrt{x_i}-\sqrt{x_j})^2(\sqrt{x_i}+\sqrt{x_j})^2(-\sqrt{x_i}+\sqrt{x_j})^2(-\sqrt{x_i}-\sqrt{x_j})^2\]</span></p><p><span class="math display">\[\Delta(f(x^2)) = \prod_{i\leqj}(\sqrt{x_i}-\sqrt{x_j})^4(\sqrt{x_i}+\sqrt{x_j})^4\]</span></p><p><span class="math display">\[\Delta(f(x^2)) = \prod_{i\leqj}(x_i-x_j)^4 = \boxed{\Delta(f(x))^2}\]</span></p><h4 id="exercise-7">Exercise 7</h4><p>Find an equation for curve:</p><p><span class="math display">\[ x = t^3 + 2t -3 \]</span></p><p><span class="math display">\[ y = t^2-t +1 \]</span></p><p><span class="math display">\[ f(t) = t^3 + 2t -3 -x \]</span></p><p><span class="math display">\[ g(t) = t^2-t +1 - y \]</span></p><p>so for a given <span class="math inline">\((x,y)\)</span>, thereshould exist a <span class="math inline">\(t\)</span> such that both<span class="math inline">\(f(t)\)</span> and <spanclass="math inline">\(g(t)\)</span> both is <spanclass="math inline">\(0\)</span>. So they have a common root.</p><p><span class="math display">\[ R(f,g) = \det(\begin{bmatrix}1 &amp; 0 &amp; 2 &amp; -3-x &amp; 0 \\0 &amp; 1 &amp; 0 &amp; 2 &amp; -3-x \\2 &amp; -1 &amp; 1-y &amp; 0 &amp; 0 \\0 &amp; 2 &amp; -1 &amp; 1-y &amp; 0 \\0 &amp; 0 &amp; 2 &amp; -1 &amp; 1-y\end{bmatrix}) \]</span></p><p><span class="math display">\[ R(f,g) = \boxed{y^3 - x^2 + 3xy + y^2-6x + 10y -12}\]</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高等代数学-chapter-5&quot;&gt;高等代数学 Chapter 5&lt;/h1&gt;
&lt;p&gt;Chapter 5.10 Polynomials&lt;/p&gt;
&lt;h4 id=&quot;theorem-5.7.4&quot;&gt;Theorem 5.7.4&lt;/h4&gt;
&lt;p&gt;Eisenstein Method</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="数学Math" scheme="https://7ue9ueue.github.io/tags/%E6%95%B0%E5%AD%A6Math/"/>
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
  </entry>
  
  <entry>
    <title>Some Random Poetry</title>
    <link href="https://7ue9ueue.github.io/2023/06/08/%E4%B8%AD%E6%96%87/Poetry/"/>
    <id>https://7ue9ueue.github.io/2023/06/08/%E4%B8%AD%E6%96%87/Poetry/</id>
    <published>2023-06-07T16:00:00.000Z</published>
    <updated>2023-06-09T05:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dont-know-what-should-be-the-title">Dont know what should be thetitle</h1><p>The lovely night that soote all busy owls<br />With the darkness over the tall buildings<br />Dont know what to write yet<br />Dont know what to write yet</p><p>Dont know what to write yet<br />Dont know what to write yet<br />Dont know what to write yet<br />Dont know what to write yet</p><p>Dont know what to write yet<br />Dont know what to write yet<br />Dont know what to write yet<br />Dont know what to write yet</p><p>I live in the counter clockwise clock curled<br />Collapsed alone in a collasping world</p><hr /><p>I can only think of the last two lines, I tried my best.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;dont-know-what-should-be-the-title&quot;&gt;Dont know what should be the
title&lt;/h1&gt;
&lt;p&gt;The lovely night that soote all busy owls&lt;br /&gt;
With </summary>
      
    
    
    
    <category term="随笔Prose" scheme="https://7ue9ueue.github.io/categories/%E9%9A%8F%E7%AC%94Prose/"/>
    
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
    <category term="创作Creativity" scheme="https://7ue9ueue.github.io/tags/%E5%88%9B%E4%BD%9CCreativity/"/>
    
  </entry>
  
  <entry>
    <title>HEXO Blog Setup</title>
    <link href="https://7ue9ueue.github.io/2023/06/03/%E4%B8%AD%E6%96%87/HEXO%20setup/"/>
    <id>https://7ue9ueue.github.io/2023/06/03/%E4%B8%AD%E6%96%87/HEXO%20setup/</id>
    <published>2023-06-03T07:18:00.000Z</published>
    <updated>2023-06-11T11:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Setting up this Hexo blog is quite difficult. There are manyunexpected problems that are solved and I will record them in thisentry.</p><ol type="1"><li><p>Install Node.js and Git</p></li><li><p>Install Hexo https://hexo.io/</p></li><li><p>Install Hexo Theme Journalhttps://github.com/SumiMakito/hexo-theme-journal/</p></li><li><p>Install Pandoc for LaTeXhttps://blog.csdn.net/qq_52466006/article/details/126924064</p></li></ol><blockquote><p>At this step, many problems occur. The major issue is the theme doesnot support LaTeX. I tried changing to<code>$npm install hexo-renderer-kramed</code> and<code>$npm install hexo-renderer-mathjax</code> but it doesn't work. Thereason is likely because that these two plugins are too old. On theotherhand, <code>$npm install hexo-renderer-pandoc</code> is a saferchoice because it needs less modifications and more robust.</p></blockquote><blockquote><p>From my research, this solution is more likely to work and shouldwork for all themes on Hexo.</p></blockquote><p>Write this in Powershell <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$npm un hexo-math</span><br><span class="line">$npm un hexo-renderer-marked</span><br><span class="line">$npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure></p><ol start="5" type="1"><li>Add the following to <code>_config.yml</code> in themes folder.</li></ol><blockquote><p>Here a problem that I encountered is that all $$ symbol in LaTeX isreplaced by <code>\[</code>. The solution is to refer to a javascript inyour HTML file. I tried<code>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</code>but it does not work. This should be because this cdn is already down soa later one should be used instead.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line">  cdn: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js</span><br></pre></td></tr></table></figure><p>Its also worth trying to add this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p>in all MarkDown files that needs LaTeX.</p><ol start="6" type="1"><li><p>Enter <code>pandoc -v</code> and see if Pandoc is successfullyinstalled.</p></li><li><p>Build the static website.</p></li></ol><blockquote><p>There are some general requirements for Hexo MarkDown files, such asno three slashes together, and the MarkDown files should be placed under<code>_posts</code> folder.</p></blockquote><blockquote><p>I added a profile page for my Blog. To do this, change the_config.yml in the themes folder and change the menu section. The formatis <code>&lt;Name&gt;: &lt;Path&gt;</code>, for my Blog its About Me:/About.html.</p></blockquote><p>Write this in Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$npx hexo generate</span><br><span class="line">$npx hexo server</span><br></pre></td></tr></table></figure><ol start="8" type="1"><li>If successful, deploy the static website on Github Page!https://hexo.io/docs/one-command-deployment</li></ol><p>Write this in Powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>Change the <code>_config.yml</code> in the root folder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: gh-pages</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><p>And try</p><blockquote><p>Here my connections was very unstable. The solution is to do gitconfig <code>--global --unset http.proxy</code> then do git config<code>--global --unset https.proxy</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npx hexo deploy</span><br></pre></td></tr></table></figure><p>And my Hexo blog is successfully initialised on Github Page!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Setting up this Hexo blog is quite difficult. There are many
unexpected problems that are solved and I will record them in this
entry.&lt;/p</summary>
      
    
    
    
    <category term="教程Tutorial" scheme="https://7ue9ueue.github.io/categories/%E6%95%99%E7%A8%8BTutorial/"/>
    
    
    <category term="英文English" scheme="https://7ue9ueue.github.io/tags/%E8%8B%B1%E6%96%87English/"/>
    
    <category term="开发Development" scheme="https://7ue9ueue.github.io/tags/%E5%BC%80%E5%8F%91Development/"/>
    
  </entry>
  
  <entry>
    <title>2-SAT 学习笔记</title>
    <link href="https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/2-SAT%20%E6%A8%A1%E6%9D%BF/"/>
    <id>https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/2-SAT%20%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-06-12T03:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法名字:</strong> 2—SAT</p><p><strong>对应难度:</strong> 省选+/USACO Platinum</p><p><strong>算法优势:</strong></p><ol type="1"><li>图论基本算法之一</li></ol><p>{注: 在2001年以出现此知识点}</p><p>{注: 在2010年左右的欧洲算法竞赛中, 此知识点出现及其频繁}</p><p>{注: 作者认为2-SAT可以理解为是并查集在维护布尔变量时的一种拓展,本质上维护的将并查集的双向联通的要求改成了单向联通}</p><p><strong>解决问题</strong> <ahref="https://www.luogu.com.cn/problem/P4782">2-SAT</a></p><p>给 n 个 0/1 变量, $ x_i {i} $</p><p>有 <span class="math inline">\(m\)</span> 需要满足的条件, 形式为: 若<span class="math inline">\(x_i = a\)</span>, 则 <spanclass="math inline">\(x_j = b\)</span></p><p><strong>算法描述:</strong></p><p>拆点对于 <span class="math inline">\(x_i\)</span>, 拆成 <spanclass="math inline">\(a_i\)</span> 和 <spanclass="math inline">\(a_i&#39;\)</span></p><p>其中 <span class="math inline">\(a_i\)</span> 表示 <spanclass="math inline">\(x_i\)</span> 为 1, <spanclass="math inline">\(a_i&#39;\)</span> 表示 <spanclass="math inline">\(x_i\)</span> 为 0</p><p>我们需要在此图中选取 <span class="math inline">\(n\)</span> 的点,来代表 <span class="math inline">\(x_i\)</span> 的取值</p><p>对于一个条件, 可以建立一条有向边 &lt;u,v&gt;, 即若 <spanclass="math inline">\(u\)</span> 选择, <spanclass="math inline">\(v\)</span> 必须也选择</p><p>则对于每个 <span class="math inline">\(\text{SCC}\)</span>,强连通分量进行 <span class="math inline">\(\text{tarjan}\)</span> 缩点,每个强联通分量要么同时选或者不选</p><p>若 <span class="math inline">\(a_i\)</span> 和 <spanclass="math inline">\(a_i&#39;\)</span> 处于一个强连通分量, 则无解</p><p>若要求输出答案, 可以发现图为 <spanclass="math inline">\(\text{DAG}\)</span>,拓扑排序输出一种可行的答案即可</p><p>但是可以发现 <span class="math inline">\(\text{tarjan}\)</span> 后的<span class="math inline">\(\text{SCC}\)</span> 自然满足拓扑序的要求,则有下面这种简洁的输出方式:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">    cout&lt;&lt;(SCC[i]&gt;SCC[i+n])&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">**板子附上:**</span><br><span class="line"></span><br><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        edges[a+n*b].<span class="built_in">push_back</span>(c+n*(d^<span class="number">1</span>));</span><br><span class="line">        edges[c+n*d].<span class="built_in">push_back</span>(a+n*(b^<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Tarjan缩点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断无解</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (belong[i]==belong[i+n]) &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;IMPOSSIBLE&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;POSSIBLE&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//输出答案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        cout&lt;&lt;(belong[i]&gt;belong[i+n])&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题目练习:</strong></p><p>[P4782 【模板】2-SAT 问题](https://www.luogu.com.cn/problem/P4782)</p><p>[P5782 [POI2001] 和平委员会](https://www.luogu.com.cn/problem/P5782)</p><p>[P6378 [PA2010] Riddle] (https://www.luogu.com.cn/problem/P6378)</p><p>[P3513 [POI2011]KON-Conspiracy](https://www.luogu.com.cn/problem/P3513)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;算法名字:&lt;/strong&gt; 2—SAT&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对应难度:&lt;/strong&gt; 省选+/USACO Platinum&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法优势:&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;图论基本算法之</summary>
      
    
    
    
    <category term="笔记Notes" scheme="https://7ue9ueue.github.io/categories/%E7%AC%94%E8%AE%B0Notes/"/>
    
    
    <category term="中文Chinese" scheme="https://7ue9ueue.github.io/tags/%E4%B8%AD%E6%96%87Chinese/"/>
    
    <category term="归档Archived" scheme="https://7ue9ueue.github.io/tags/%E5%BD%92%E6%A1%A3Archived/"/>
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
  </entry>
  
  <entry>
    <title>AIO Lollipops, Sweets and Chocolates 题解</title>
    <link href="https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/AIO%20%E4%B8%80%E9%A2%98%E9%A2%98%E8%A7%A3/"/>
    <id>https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/AIO%20%E4%B8%80%E9%A2%98%E9%A2%98%E8%A7%A3/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-06-11T11:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目难度:</strong> NOIP / USACO Silver</p><p><strong>题目分类:</strong> 简单题</p><p><strong>题目大意:</strong> [AIOSeniorT4] Lollipops, Sweets andChocolates</p><p>[https://orac.amt.edu.au/cgi-bin/train/problem.pl?set=aio17sen&amp;problemid=985]</p><p>一条街上面有 <span class="math inline">\(n\)</span> 个商铺, 第 <spanclass="math inline">\(i\)</span> 个商铺在 <spanclass="math inline">\(a_i\)</span> 上面</p><p>已知有一告示牌在位置 <span class="math inline">\(x\)</span>,且根据距离从上到下依次写出距离告示牌从近到远的编号, 求 <spanclass="math inline">\(x\)</span></p><p><span class="math inline">\(n≤10^5\)</span></p><p><span class="math inline">\(0≤a_i≤10^9\)</span></p><p><strong>题目答案:</strong></p><p>我看到这道题的时候直觉是去二分, 然后将告示牌上的内容求出来, 并且对<span class="math inline">\(x\)</span> 做出调整</p><p>但是这个做法的正确性存疑, 因此我问了 <span class="citation"data-cites="ETK">@ETK</span> , 他说可以从上到下遍历告示牌上的内容,然后维护一个答案可能出现在的区间, 每次求并集即可</p><p>很神奇, 两种解法都是可行的!</p><p>但是本菜鸡只会 <span class="math inline">\(O(n\log^2n)\)</span>,差点卡常被卡死 (</p><p>显然 <span class="math inline">\(O(n)\)</span> 的后者更优!</p><p>今天还做了一道题, 感觉非常的不好写, 问了 <span class="citation"data-cites="ETK">@ETK</span> 之后才发现是个2-SAT板子, 呜呜呜</p><p>Sol 1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;bits/stdc++.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> o[maxn];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span> <span class="params">(P a, P b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">check</span> <span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v[i] = &#123;<span class="built_in">abs</span>(a[i]-x),i&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(v+<span class="number">1</span>,v+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;&quot;x = &quot;&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for (int i=0;i&lt;n;i++) &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;v[i].id&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (o[i]!=v[i].id) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[o[i]]-x)==<span class="built_in">abs</span>(a[v[i].id]-x)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> a[o[i]]-x&lt;<span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;x&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;lscin.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;lscout.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> L;cin&gt;&gt;L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;o[i];</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = L;</span><br><span class="line">    <span class="keyword">while</span> (left&lt;=right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) right = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sol 2 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seg</span> &#123;</span><br><span class="line">    <span class="type">int</span> l;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">int</span> o[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">seg <span class="title">Union</span> <span class="params">(seg a, seg b)</span> </span>&#123;</span><br><span class="line">    seg res = &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    res.l = <span class="built_in">max</span>(a.l,b.l);</span><br><span class="line">    res.r = <span class="built_in">min</span>(a.r,b.r);</span><br><span class="line">    <span class="keyword">if</span> (res.l&gt;res.r) &#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>&lt;&lt;endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;lscin.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;lscout.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> L;cin&gt;&gt;L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;o[i];</span><br><span class="line">    seg ans = &#123;<span class="number">1</span>,L&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        seg cur;</span><br><span class="line">        <span class="type">int</span> pos = (a[o[i]]+a[o[i+<span class="number">1</span>]])/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[o[i]]&gt;a[o[i+<span class="number">1</span>]]) &#123;</span><br><span class="line">            cur.r = L;</span><br><span class="line">            cur.l = (a[o[i]]+a[o[i+<span class="number">1</span>]]+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cur.l = <span class="number">0</span>;</span><br><span class="line">            cur.r = (a[o[i]]+a[o[i+<span class="number">1</span>]])/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">Union</span>(ans,cur);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans.l&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目难度:&lt;/strong&gt; NOIP / USACO Silver&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目分类:&lt;/strong&gt; 简单题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目大意:&lt;/strong&gt; [AIOSeniorT4] Lollipops, Sweet</summary>
      
    
    
    
    <category term="题解Solution" scheme="https://7ue9ueue.github.io/categories/%E9%A2%98%E8%A7%A3Solution/"/>
    
    
    <category term="中文Chinese" scheme="https://7ue9ueue.github.io/tags/%E4%B8%AD%E6%96%87Chinese/"/>
    
    <category term="归档Archived" scheme="https://7ue9ueue.github.io/tags/%E5%BD%92%E6%A1%A3Archived/"/>
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
  </entry>
  
  <entry>
    <title>AIO 游记</title>
    <link href="https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/AIO%20%E6%B8%B8%E8%AE%B0/"/>
    <id>https://7ue9ueue.github.io/2023/01/01/%E4%B8%AD%E6%96%87/AIO%20%E6%B8%B8%E8%AE%B0/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-06-11T11:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>金色的AIO 2021游记</p><p>好耶, 集训队了<br />题目难度: CF2000-2200, CSP-S一等奖<br />分数: (100+100+100+100+100+100) / 600</p><p>Day -2</p><p>考前在做一道比较分类讨论的题目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">有 n 个学生, 其中有一个学生偷吃了饼干</span><br><span class="line">现在有 m 条口供, 每一种口供为如下三种其一:</span><br><span class="line"></span><br><span class="line">x 说 y 在说谎</span><br><span class="line">x 说 y 没有说谎</span><br><span class="line">x 说 y 偷吃了饼干</span><br><span class="line"></span><br><span class="line">已知每个学生要么只说谎要么只说实话, 求谁可能偷吃了饼干, 或者此情况是不可能的</span><br></pre></td></tr></table></figure><p>去年都用二分图染色去做, 没成功</p><p>这次用并查集去做, 调了 10hrs 后分类讨论出来了</p><p>Day 1</p><p>请假 <del>(逃课)</del> 在睡觉, 然后打游戏</p><p>上午的时候做了套前几年的题, 40min AK掉了, 自信心提升了</p><p>下午的时候想写写题, 第一题就没调出来, 就又睡觉去了</p><p>Day 0</p><p>比较提前的到了考场, 心情比较平静, 比较紧张,和Ethan妈妈一起布置了一下考场环境然后简单的沟通了一下就直接开考了</p><p>我的策略是顺着做题, 做完才看下一题, 因为我是奔着满分去的,而不是在省选集训那样为了骗分去打出各种策略</p><p>一共有六道题, 前三题是简单题, 大概是普及组的难度,花了15分钟左右写好了</p><p><strong>T1 Robot [普及]</strong>,考虑起点和终点的曼哈顿距离即可<br /><strong>T2 Art Class II [普及]</strong>,考虑xy坐标情况下分别的最值即可<br /><strong>T3 Melody [普及]</strong>, 考虑 Mod 3每个同余组内最多的数的个数即可</p><p>然后其实把握是比较大的, 因为最近几个月的cf训练导致我的手速及其的快,其实这套题也和cf的题目类似, 也就做的比较顺了</p><p><strong>T4 Social Distancing [普及+/提高-]</strong>是第一道有一些算法的题目, 但是很显然的动态规划, 具体而言, 转移式应是:</p><p><span class="math display">\[dp(i) = \max((dp(j)+v(i) [pos(i)-pos(j) ≥ k] ))\]</span></p><p><span class="math display">\[v(i), pos(i) ≥ 0\]</span></p><p>对所有的 <span class="math inline">\(\text{pos}\)</span>进行排序后动态规划即可</p><p>朴素的做法是 <span class="math inline">\(O(n^2)\)</span>,直接数据结构是 <span class="math inline">\(O(n\log n)\)</span> 的,而且会非常的耗时, 但是这个动态规划显然单调递增, 因此具有抉择单调性,可以用维护一个前缀最大值的方法做到 <spanclass="math inline">\(O(n)\)</span>, 而且比较好写</p><p>写法大概就是考虑一个新的 <spanclass="math inline">\(\text{i}\)</span> 可以激活什么点,激活后就把放入到前缀最大值的考虑当中</p><p>抉择单调性的证明是这样的:</p><p>$dp(i) = ((dp(j)+v(i)[pos(i)-pos(j) ≥ k]) $</p><p>$dp(i) = (dp(j)[pos(i)-k≥pos(j)])+v(i) $</p><p>又有 <span class="math inline">\(pos(i)-k\)</span> 递增, 故 <spanclass="math inline">\(\text{dp}\)</span> 递增, 自然具有抉择单调性</p><p>大概花了20分钟就写出来, 感觉难度不是很大, 但是写这种「激活」类型的代码我一直不太擅长, 所以运气还是比较好的</p><p>第一遍提交的时候以为 <span class="math inline">\(v[i]=1\)</span> 了,读了一边题后发现了这个问题, 解决了就通过了</p><p><strong>T5 Space Mission [提高]</strong>是一个trival的数据结构问题</p><p>这个问题用代数形式表达出来就是:</p><p><spanclass="math display">\[\max(\text{abs}(i-j)[v[i]+v[j]≤C])\]</span></p><p>遇到绝对值可以直接分类讨论, 然后看到这是个类似二维偏序的问题,直接数据结构就好了, 然后可以用上一题激活的思想离线可以处理掉一维,最后剩下的问题用线段树/树状数组就好了</p><p>(不知道为啥我离线之后维度还是二,反思了一下如果离线之后可能不需要数据结构了,但是我考场上还是写了个线段树)</p><p>我的代码能力比较差, 这题大概花了一个小时, 但还是有惊无险的通过了</p><p><strong>T6 Laser Cut [提高+/省选-]</strong>是对代码能力要求比较高的题目,题目大意是在一个正方形中给一个两条不相交的折线(每一部分与正方形一边平行),其中折线的长度都是正方形长度的两倍,求两条折线中间围出的区域最大能塞一个多大的正方形</p><p>这道题看到的时候稍微有点慌, 因为一眼只有想法, 没有答案</p><p>前几题一眼能看出答案,这题只能大概猜出是动态规划或者数据结构方面的一个问题, 但是看到数据范围是$ 10^5$ 就大概清楚具体做法了</p><p>首先这个问题必须要利用到单调性, 因为 <spanclass="math inline">\(10^{10}\)</span> 的信息量去表达一个形状是不可行的,因此需要用 <span class="math inline">\(10^5\)</span>的信息量去考虑每一行的左右限制</p><ol type="1"><li>我的第一想法是首先考虑下折线中的每个折点,我认为每一种正方形的方法都可以平移到使得左下角在折点中的情况</li></ol><p>由于题目的特殊限制是<strong>正方形</strong>,不是<strong>长方形</strong>, 那么我可以锁定右上角在 <spanclass="math inline">\(x = y\)</span> 上的所有点上,只要在中间区域就行</p><p>然后会发现上折线中的折点如果在 <span class="math inline">\(x =y\)</span> 一点的右下方, 这个点就不能选了,那此时我把这个问题从一个不具体的二维问题变成了一个可做的东西,然后枚举下折点, 和上折点, 就可以做到 <spanclass="math inline">\(O(n^2)\)</span> 了</p><p>但是这一切是基于 猜想 1 成立的情况下的</p><p>写了个暴力, 一直没过, 开始质疑自己的结论但是没有找到反例,最后在考试还剩30分钟的时候暴力成功通过</p><p>当时很激动, 因为我大概 <span class="math inline">\(O(n\logn)\)</span> 做法</p><p>考虑每个右折点会导致答案 <span class="math inline">\(ans =\min(ans,v[r])\)</span>, 然后最终答案自然是 <spanclass="math inline">\(\max(ans)\)</span>, 此时有单调性:</p><p><strong>v[x] 是凹函数</strong></p><p>我只需要在上面一个做斜率二分就好了, 但是我发现我不会斜率二分,然后我打算写一个三分乱搞试试</p><p>反正时间没多少, 不如写一个自己有把握的</p><p>但是三分的问题是可能两个采样点相等, 当时看到问题的时候有些害怕,因为这个问题似乎非常的本质, 无法短时间解决</p><p>我记得当时还剩10分钟, 但是我之前的紧张感好像一点都没了</p><p>我只在认真的思考解决的方法</p><p>我在想, 我在想如何拯救一个假掉的算法</p><p>如果能想出来, 那集训队就到手了</p><p>那么如果问题是本质的话, 那就考虑乱搞吧</p><p>梦回金华集训!!!!!!</p><p>我如果两个采样点相同, 那么我直接break掉循环, 然后遍历 v[left:right],然后就看有没有奇迹了</p><p>然后奇迹发生了, 通过了, 运气非常不错, 当时比赛还剩五分钟,看到自己的分数是</p><p>100 + 100 + 100 + 100 + 100 + 100</p><p>非常的激动, 庆祝了一番, 然后就和Ethan和深中的某位大佬吃饭去了</p><p>然后吃完饭, Ethan带我走了走校园, 不得不说还是非常壮观的,甚至校园内部有一个园林, 园林内部还有湖, 湖里还有鸭子可以喂</p><p>如果能重来, 我要上清华!!!!!!!!!!!!!!!!! (?)</p><p>对于第六题的证明是这样的:</p><p>最多有 n 组情况会导致强制break, 有 <spanclass="math inline">\(n^2\)</span> 中采样方法, 概率大概是 <spanclass="math inline">\(\dfrac{1}{n}\)</span></p><p>所以次数必然小于</p><p><span class="math display">\[\sum_{i=1}^{O(\lg n)} \dfrac{1}{n^i}(\dfrac{3}{4})^i O(\lg n)\]</span></p><p>必然小于</p><p><span class="math display">\[\sum_{i=1}^{\inf} \dfrac{1}{n^i}(\dfrac{3}{4})^i O(\lg n)\]</span></p><p>固然小于</p><p><span class="math display">\[\dfrac {O(\lg n)}{1-\dfrac{3}{4n}} = \dfrac {O(\lg n)}{\dfrac{4n-3}{4n}}= \dfrac {4nO(\lg n)}{4n-3} = O(\lg n)\]</span></p><p>所以随机情况下这个算法的时间复杂度是正确的</p><p>感谢我的爸爸和妈妈始终支持我学习算法, 帮我买书, 报课, 报集训!</p><p>感谢Ethan妈妈帮我成功在深圳报上AIO!</p><p>感谢ETK和我一直进行算法学习上的交流 ~</p><p>感谢Starlight237的学习资料和考前的rp++!</p><p>感谢干大好事群里的各位, 我以后打比赛也会继续当吉祥物的!祝各位都进省队~</p><p>那么我就很荣幸的暂时AFO啦~ 几个月后见</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;金色的AIO 2021游记&lt;/p&gt;
&lt;p&gt;好耶, 集训队了&lt;br /&gt;
题目难度: CF2000-2200, CSP-S一等奖&lt;br /&gt;
分数: (100+100+100+100+100+100) / 600&lt;/p&gt;
&lt;p&gt;Day -2&lt;/p&gt;
&lt;p&gt;考前在做一道比较分类</summary>
      
    
    
    
    <category term="游记Diary" scheme="https://7ue9ueue.github.io/categories/%E6%B8%B8%E8%AE%B0Diary/"/>
    
    
    <category term="中文Chinese" scheme="https://7ue9ueue.github.io/tags/%E4%B8%AD%E6%96%87Chinese/"/>
    
    <category term="归档Archived" scheme="https://7ue9ueue.github.io/tags/%E5%BD%92%E6%A1%A3Archived/"/>
    
    <category term="信竞OI" scheme="https://7ue9ueue.github.io/tags/%E4%BF%A1%E7%AB%9EOI/"/>
    
  </entry>
  
</feed>
